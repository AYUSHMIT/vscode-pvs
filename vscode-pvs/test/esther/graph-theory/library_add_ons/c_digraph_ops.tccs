%% TCCs associated with theory c_digraph_ops
%% This file was automatically generated by PVS, please **do not modify** by hand.
c_digraph_ops_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 22, column 136) for  v
	% expected type  {a: T | member(a, data(cd))}
	  % untried
	adjacent_verts_TCC1: OBLIGATION
	FORALL (cd: c_digraph[T],
	          v:
	            vert[T, digraph_type[T], digraph_verts, digraph_edges,
	                 digraph_size, digraph_make](cd)):
	    member[T](v, cd`data)
	
	% Subtype TCC generated (at line 22, column 122) for  idx(data(cd), v)
	% expected type  below[length[list[nat]](adjs(cd))]
	  % untried
	adjacent_verts_TCC2: OBLIGATION
	FORALL (cd: c_digraph[T],
	          v:
	            vert[T, digraph_type[T], digraph_verts, digraph_edges,
	                 digraph_size, digraph_make](cd)):
	    idx[T](cd`data, v) < length[list[nat]](cd`adjs)
	
	% Subtype TCC generated (at line 22, column 108) for
	% nth(adjs(cd), idx(data(cd), v))
	% expected type  list[below(length(data(cd)))]
	  % untried
	adjacent_verts_TCC3: OBLIGATION
	FORALL (cd: c_digraph[T],
	          v:
	            vert[T, digraph_type[T], digraph_verts, digraph_edges,
	                 digraph_size, digraph_make](cd)):
	    every[number]
	        (LAMBDA (x: number):
	                number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	            AND integer_pred(x) AND (x >= 0) AND (x < length[T](cd`data)))
	        (nth[list[nat]](cd`adjs, idx[T](cd`data, v)))
	
	% Subtype TCC generated (at line 22, column 50) for
	% map(LAMBDA (x: below(length(data(cd)))): nth(data(cd), x),
	%     nth(adjs(cd), idx(data(cd), v)))
	% expected type  list[vert[T, digraph_type[T], digraph_verts,
	%           digraph_edges, digraph_size,
	%           digraph_make](cd)]
	  % untried
	adjacent_verts_TCC4: OBLIGATION
	FORALL (cd: c_digraph[T],
	          v:
	            vert[T, digraph_type[T], digraph_verts, digraph_edges,
	                 digraph_size, digraph_make](cd)):
	    every[T]
	        (vert?[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
	               digraph_make]
	             (cd))
	        (map[below(length(cd`data)), T]
	             (LAMBDA (x: below(length[T](cd`data))): nth[T](cd`data, x),
	              nth[list[nat]](cd`adjs, idx[T](cd`data, v))))
	
	% Subtype TCC generated (at line 25, column 156) for  v_idx
	% expected type  below(length(map(LAMBDA
	%                  (x: list[nat]):
	%                  remove_sl(v_idx, x),
	%                  adjs(cd))))
	  % untried
	remove_v_adjs_TCC1: OBLIGATION
	FORALL (cd: c_digraph[T],
	          v:
	            vert[T, digraph_type[T], digraph_verts, digraph_edges,
	                 digraph_size, digraph_make](cd),
	          v_idx: nat):
	    v_idx = idx(cd`data, v) IMPLIES
	     v_idx <
	      length[list[nat]]
	          (map[list[nat], list[nat]]
	               (LAMBDA (x: list[nat]): remove_sl[nat](v_idx, x), cd`adjs))
	
	% The subtype TCC (at line 25, column 81) in decl nil for
	% term generated from remove_v_adjs  v
	% expected type  {a: T | member(a, cd`data)}
	% Subtype TCC generated (at line 28, column 54) for  x - 1
	% expected type  nat
	  % untried
	sub_one_greater_n_TCC1: OBLIGATION
	FORALL (n, x: nat): x > n IMPLIES x - 1 >= 0
	
	% The subtype TCC (at line 25, column 81) in decl nil for
	 % term generated from remove_v_adjs  v
	    % expected type  {a: T | member(a, cd`data)}
	  % is subsumed by adjacent_verts_TCC1
	
	% The subtype TCC (at line 40, column 88) in decl nil for
	% term generated from relabel_adjs_aft_del  v
	% expected type  {a: T | member(a, cd`data)}
	% Subtype TCC generated (at line 74, column 0) for
	% (# data := remove_sl(v, data(cd)), adjs := nonadj_edges_to_v #)
	% expected type  di_subgraph
	%     [T, digraph_type[T], digraph_verts, digraph_edges,
	%      digraph_size, digraph_make](cd)
	  % untried
	del_vert_TCC1: OBLIGATION
	FORALL (cd: c_digraph[T],
	          v:
	            vert[T, digraph_type[T], digraph_verts, digraph_edges,
	                 digraph_size, digraph_make](cd),
	          nonadj_edges_to_v: list[list[nat]]):
	    nonadj_edges_to_v = relabel_adjs_aft_del(cd)(v) IMPLIES
	     cdigraph[T]
	         ((# data := remove_sl[T](v, cd`data), adjs := nonadj_edges_to_v #))
	      AND
	      di_subgraph?
	          [T, digraph_type[T], digraph_verts[T], digraph_edges[T],
	           digraph_size[T], digraph_make[T]]
	          ((# data := remove_sl[T](v, cd`data), adjs := nonadj_edges_to_v #),
	           cd)
	
	% The subtype TCC (at line 40, column 88) in decl nil for
	 % term generated from relabel_adjs_aft_del  v
	    % expected type  {a: T | member(a, cd`data)}
	  % is subsumed by adjacent_verts_TCC1

END c_digraph_ops_TCCS