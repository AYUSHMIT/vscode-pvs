(even_more_list_props
 (remove_sl_cons 0
  (remove_sl_cons-1 nil 3866804429
   ("" (induct l)
    (("1" (skeep)
      (("1" (expand "remove_sl")
        (("1" (assert)
          (("1" (split)
            (("1" (flatten)
              (("1" (assert)
                (("1" (expand "remove_sl") (("1" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (expand "remove_sl") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (split)
          (("1" (flatten)
            (("1" (expand "remove_sl" 1 1) (("1" (assert) nil nil))
              nil))
            nil)
           ("2" (expand "remove_sl" 1 1)
            (("2" (assert)
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil even_more_list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (remove_sl def-decl
     "{ll: list[T] | FORALL y: member(y, ll) IFF (x /= y AND member(y, l))}"
     set_as_list structures)
    (/= const-decl "boolean" notequal nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_sl_not_member 0
  (remove_sl_not_member-1 nil 3866804513
   ("" (induct "l")
    (("1" (skeep)
      (("1" (expand "remove_sl") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (lemma "remove_sl_cons")
          (("2" (inst -1 "cons2_var" "cons1_var" "x")
            (("2" (typepred "x")
              (("2" (flatten)
                (("2" (assert)
                  (("2" (split -2)
                    (("1" (hide -2)
                      (("1" (replace -1)
                        (("1" (inst -2 "x")
                          (("1" (replace -2) (("1" (propax) nil nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (hide -2)
                              (("2"
                                (lemma "member_nth[T]")
                                (("2"
                                  (inst -1 "cons2_var" "x")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (lemma "member_iff_nth[T]")
                                          (("2"
                                            (inst
                                             -1
                                             "cons(cons1_var,cons2_var)"
                                             "x")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (inst 1 "i+1")
                                                  (("1"
                                                    (expand "nth" 1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "i")
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2" (hide -1)
                        (("2" (hide 3)
                          (("2" (lemma "member_iff_nth[T]")
                            (("2"
                              (inst -1 "cons(cons1_var,cons2_var)" "x")
                              (("2"
                                (assert)
                                (("2"
                                  (hide 3)
                                  (("2"
                                    (inst 1 "0")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (expand "length")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_sl_cons formula-decl nil even_more_list_props nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member_nth formula-decl nil more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil even_more_list_props nil)
    (remove_sl def-decl
     "{ll: list[T] | FORALL y: member(y, ll) IFF (x /= y AND member(y, l))}"
     set_as_list structures)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_sl_no_rep_length 0
  (remove_sl_no_rep_length-1 nil 3866804588
   ("" (induct "l")
    (("1" (skeep) (("1" (typepred "x") (("1" (grind) nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (typepred "x")
          (("2" (case "x = cons1_var")
            (("1" (lemma "remove_sl_cons")
              (("1" (inst -1 "cons2_var" "cons1_var" "x")
                (("1" (assert)
                  (("1" (replace -1)
                    (("1" (lemma "remove_sl_not_member")
                      (("1" (inst -1 "cons2_var" "x")
                        (("1" (replace -1)
                          (("1" (expand "length" 1 2)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (hide-all-but (-1 -3 -6))
                          (("2" (expand "no_repetitions?" -3)
                            (("2" (lemma "member_nth[T]")
                              (("2"
                                (inst -1 "cons2_var" "x")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -3 "0" "i+1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "i")
                                          (("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "length" 1)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "remove_sl_cons")
              (("2" (inst -1 "cons2_var" "cons1_var" "x")
                (("2" (assert)
                  (("2" (replace -1)
                    (("2" (hide -1)
                      (("2" (expand "length" 2)
                        (("2" (inst -2 "x")
                          (("1" (split -2)
                            (("1" (assert) nil nil)
                             ("2" (lemma "no_rep_cdr[T]")
                              (("2"
                                (inst -1 "cons1_var" "cons2_var")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "member_iff_nth[T]")
                            (("2" (copy -1)
                              (("2"
                                (inst -1 "cons2_var" "x")
                                (("2"
                                  (inst
                                   -2
                                   "cons(cons1_var,cons2_var)"
                                   "x")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (hide (-1 -2))
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (case "i = 0")
                                            (("1"
                                              (expand "nth" -2)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "nth" -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst 2 " i-1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (no_rep_cdr formula-decl nil more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (remove_sl_cons formula-decl nil even_more_list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove_sl_not_member formula-decl nil even_more_list_props nil)
    (member_nth formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil even_more_list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (remove_sl def-decl
     "{ll: list[T] | FORALL y: member(y, ll) IFF (x /= y AND member(y, l))}"
     set_as_list structures)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_sl_member 0
  (remove_sl_member-1 nil 3866804671
   ("" (skeep)
    (("" (typepred "remove_sl(x, l)")
      (("" (inst -1 "x") (("" (rewrite -1 -2) nil nil)) nil)) nil))
    nil)
   ((remove_sl def-decl
     "{ll: list[T] | FORALL y: member(y, ll) IFF (x /= y AND member(y, l))}"
     set_as_list structures)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil even_more_list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (remove_sl_is_filter 0
  (remove_sl_is_filter-1 nil 3866804747
   ("" (induct "l")
    (("1" (skeep)
      (("1" (expand "remove_sl")
        (("1" (expand "filter") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "remove_sl" 1)
          (("2" (expand "filter" 1)
            (("2" (case "cons1_var = x")
              (("1" (assert) (("1" (inst -2 "x") nil nil)) nil)
               ("2" (assert)
                (("2" (inst -1 "x") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil even_more_list_props nil) nil
    (pred type-eq-decl nil defined_types nil)
    (remove_sl def-decl
     "{ll: list[T] | FORALL y: member(y, ll) IFF (x /= y AND member(y, l))}"
     set_as_list structures)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_sl_no_rep 0
  (remove_sl_no_rep-1 nil 3866804818
   ("" (induct "l")
    (("1" (skeep) (("1" (typepred "l!1") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (flatten)
      (("2" (skeep)
        (("2" (expand "no_repetitions?" 1)
          (("2" (expand "remove_sl")
            (("2" (skeep)
              (("2" (typepred "i")
                (("2" (assert)
                  (("2" (expand "remove_sl") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "x = cons1_var")
          (("1" (expand "remove_sl" 1)
            (("1" (assert)
              (("1" (lemma "no_rep_cdr[T]")
                (("1" (inst -1 "cons1_var" "cons2_var")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert) (("1" (inst -3 "x") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "no_rep_cdr[T]")
            (("2" (inst -1 "cons1_var" "cons2_var")
              (("2" (assert)
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (expand "remove_sl" 3)
                      (("2"
                        (case "member(cons1_var, remove_sl(x,cons2_var))")
                        (("1" (typepred "remove_sl(x,cons2_var)")
                          (("1" (hide-all-but (-1 -2 1))
                            (("1" (inst -1 "cons1_var")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (expand no_repetitions? 4)
                          (("2" (skeep)
                            (("2" (inst -2 "x")
                              (("2"
                                (case "i = 0")
                                (("1"
                                  (expand "nth" -5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "member_iff_nth[T]")
                                      (("1"
                                        (inst
                                         -1
                                         "remove_sl(x, cons2_var)"
                                         "cons1_var")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst 1 "j-1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "j =0 ")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "nth" -5)
                                      (("1"
                                        (lemma "member_iff_nth[T]")
                                        (("1"
                                          (inst
                                           -1
                                           "remove_sl(x, cons2_var)"
                                           "cons1_var")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 1 "i-1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "nth" -4)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand no_repetitions? -2)
                                        (("2"
                                          (inst -2 "i-1" "j-1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (no_rep_cdr formula-decl nil more_list_props structures)
    (nth def-decl "T" list_props nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_null formula-decl nil more_list_props structures)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil even_more_list_props nil)
    (remove_sl def-decl
     "{ll: list[T] | FORALL y: member(y, ll) IFF (x /= y AND member(y, l))}"
     set_as_list structures)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak)))

