%% TCCs associated with theory adaptive_strategy_c
%% This file was automatically generated by PVS, please **do not modify** by hand.
adaptive_strategy_c_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 17, column 78) for  v
	% expected type  (vert(d))
	  % untried
	out_deg_TCC1: OBLIGATION
	FORALL (d: c_digraph[nat],
	          v:
	            vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                 digraph_size, digraph_make](d)):
	    vert[nat](d)(v)
	
	% Subtype TCC generated (at line 34, column 22) for  v
	% expected type  vert[nat, digraph_type[nat], digraph_verts,
	%      digraph_edges, digraph_size, digraph_make](orig)
	  % untried
	capacity_TCC1: OBLIGATION
	FORALL (orig: c_digraph[nat], v: (vert[nat](orig))):
	    vert?[nat, digraph_type[nat], digraph_verts, digraph_edges, digraph_size,
	          digraph_make]
	        (orig)(v)
	
	% Subtype TCC generated (at line 38, column 63) for  v
	% expected type  vert[nat, digraph_type[nat], digraph_verts,
	%      digraph_edges, digraph_size, digraph_make](curr)
	  % untried
	has_capacity?_TCC1: OBLIGATION
	FORALL (orig: c_digraph[nat], curr: c_digraph[nat], v: (vert[nat](curr))):
	    vert(orig)(v) IMPLIES
	     vert?[nat, digraph_type[nat], digraph_verts, digraph_edges, digraph_size,
	           digraph_make]
	         (curr)(v)
	
	% Subtype TCC generated (at line 42, column 17) for  data(curr)
	% expected type  list[(vert(curr))]
	  % untried
	list_of_capable_nodes_TCC1: OBLIGATION
	FORALL (orig: c_digraph[nat], curr: c_digraph[nat]):
	    every[number]
	        (LAMBDA (x: number):
	                number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	            AND integer_pred(x) AND (x >= 0) AND vert[nat](curr)(x))
	        (curr`data)
	
	% Subtype TCC generated (at line 42, column 78) for  x
	% expected type  (vert(curr))
	  % untried
	list_of_capable_nodes_TCC2: OBLIGATION
	FORALL (orig: c_digraph[nat], curr: c_digraph[nat],
	          x:
	            vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                 digraph_size, digraph_make](curr)):
	    vert[nat](curr)(x)
	
	% Subtype TCC generated (at line 42, column 29) for
	% LAMBDA (x: vert(curr)): has_capacity?(orig, curr, x, p)
	% expected type  pred[(vert(curr))]
	  % untried
	list_of_capable_nodes_TCC3: OBLIGATION
	FORALL (orig: c_digraph[nat], curr: c_digraph[nat]):
	    FORALL (x1: nat):
	      vert?[nat, digraph_type[nat], digraph_verts, digraph_edges, digraph_size,
	            digraph_make]
	          (curr)(x1)
	       IFF vert[nat](curr)(x1)
	
	% Subtype TCC generated (at line 47, column 44) for
	% list_of_capable_nodes(orig, curr, p)
	% expected type  list[vert[nat, digraph_type[nat], digraph_verts,
	%           digraph_edges, digraph_size,
	%           digraph_make](curr)]
	  % untried
	usable_nodes_TCC1: OBLIGATION
	FORALL (orig: c_digraph[nat], curr: c_digraph[nat], p: nnreal,
	          v:
	            vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                 digraph_size, digraph_make](curr)):
	    every[number]
	        (LAMBDA (x: number):
	                number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	            AND integer_pred(x) AND (x >= 0)
	            AND vert?[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                      digraph_size, digraph_make]
	                    (curr)(x))
	        (list_of_capable_nodes(orig, curr, p))
	
	% Subtype TCC generated (at line 48, column 23) for  cap_nodes
	% expected type  list[(vert(curr))]
	  % untried
	usable_nodes_TCC2: OBLIGATION
	FORALL (orig: c_digraph[nat], curr: c_digraph[nat], p: nnreal,
	          v:
	            vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                 digraph_size, digraph_make](curr),
	          cap_nodes:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)]):
	    cap_nodes = list_of_capable_nodes(orig, curr, p) IMPLIES
	     every[number]
	         (LAMBDA (x: number):
	                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	             AND integer_pred(x) AND (x >= 0) AND vert[nat](curr)(x))
	         (cap_nodes)
	
	% The subtype TCC (at line 48, column 20) in decl nil for
	% term generated from usable_nodes  v
	% expected type  (vert(curr))
	% Subtype TCC generated (at line 59, column 55) for  v
	% expected type  vert[nat, digraph_type[nat], digraph_verts,
	%      digraph_edges, digraph_size, digraph_make](K)
	  % untried
	next_closest_node_TCC1: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          v: (vert[nat](K)),
	          us_nodes:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](K)]):
	    cons?(us_nodes) IMPLIES
	     vert?[nat, digraph_type[nat], digraph_verts, digraph_edges, digraph_size,
	           digraph_make]
	         (K)(v)
	
	% The subtype TCC (at line 48, column 20) in decl nil for
	 % term generated from usable_nodes  v
	    % expected type  (vert(curr))
	  % is subsumed by list_of_capable_nodes_TCC2
	
	% Subtype TCC generated (at line 60, column 45) for  dist_list
	% expected type  {l: list[posreal] | cons?[posreal](l)}
	  % untried
	next_closest_node_TCC2: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          v: (vert[nat](K)),
	          us_nodes:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](K)]):
	    cons?(us_nodes) IMPLIES
	     FORALL (dist_list: list[posreal]):
	       dist_list = map(dist(K, v), us_nodes) IMPLIES cons?[posreal](dist_list)
	
	% Subtype TCC generated (at line 61, column 54) for  min_dist
	% expected type  {a: posreal | member(a, dist_list)}
	  % untried
	next_closest_node_TCC3: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          v: (vert[nat](K)),
	          us_nodes:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](K)]):
	    cons?(us_nodes) IMPLIES
	     FORALL (dist_list: list[posreal], min_dist: posreal):
	       dist_list = map(dist(K, v), us_nodes) AND min_dist = min_list(dist_list)
	        IMPLIES member[posreal](min_dist, dist_list)
	
	% Subtype TCC generated (at line 61, column 30) for
	% idx[posreal](dist_list, min_dist)
	% expected type  below[length[real](us_nodes)]
	  % untried
	next_closest_node_TCC4: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          v: (vert[nat](K)),
	          us_nodes:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](K)]):
	    cons?(us_nodes) IMPLIES
	     FORALL (dist_list: list[posreal], min_dist: posreal):
	       dist_list = map(dist(K, v), us_nodes) AND min_dist = min_list(dist_list)
	        IMPLIES idx[posreal](dist_list, min_dist) < length[real](us_nodes)
	
	% Subtype TCC generated (at line 61, column 16) for
	% nth(us_nodes, idx[posreal](dist_list, min_dist))
	% expected type  (vert(K))
	  % untried
	next_closest_node_TCC5: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          v: (vert[nat](K)),
	          us_nodes:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](K)]):
	    cons?(us_nodes) IMPLIES
	     FORALL (dist_list: list[posreal], min_dist: posreal):
	       dist_list = map(dist(K, v), us_nodes) AND min_dist = min_list(dist_list)
	        IMPLIES
	        rational_pred(nth[real](us_nodes, idx[posreal](dist_list, min_dist)))
	         AND
	         integer_pred(nth[real](us_nodes, idx[posreal](dist_list, min_dist)))
	          AND
	          nth[real](us_nodes, idx[posreal](dist_list, min_dist)) >= 0 AND
	           vert[nat](K)(nth[real](us_nodes, idx[posreal](dist_list, min_dist)))
	
	% Subtype TCC generated (at line 74, column 59) for  v
	% expected type  (vert(K))
	  % untried
	adaptive_rec_TCC1: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)],
	          p: nnreal):
	    NOT null?(adj_verts) IMPLIES
	     FORALL (us_nodes:
	               list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                         digraph_edges[nat], digraph_size[nat],
	                         digraph_make[nat]](curr)]):
	       us_nodes = usable_nodes(orig, curr, p, car(adj_verts)) IMPLIES
	        vert[nat](K)(v)
	
	% Subtype TCC generated (at line 74, column 62) for  us_nodes
	% expected type  list[vert[nat, digraph_type[nat], digraph_verts,
	%           digraph_edges, digraph_size,
	%           digraph_make](K)]
	  % untried
	adaptive_rec_TCC2: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)],
	          p: nnreal):
	    NOT null?(adj_verts) IMPLIES
	     FORALL (us_nodes:
	               list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                         digraph_edges[nat], digraph_size[nat],
	                         digraph_make[nat]](curr)]):
	       us_nodes = usable_nodes(orig, curr, p, car(adj_verts)) IMPLIES
	        every[number]
	            (LAMBDA (x: number):
	                    number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	                AND integer_pred(x) AND (x >= 0)
	                AND vert?[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                          digraph_size, digraph_make]
	                        (K)(x))
	            (us_nodes)
	
	% Subtype TCC generated (at line 74, column 38) for
	% next_closest_node(K, v, us_nodes)
	% expected type  vert[nat, digraph_type[nat], digraph_verts,
	%      digraph_edges, digraph_size, digraph_make](K)
	  % untried
	adaptive_rec_TCC3: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)],
	          p: nnreal):
	    NOT null?(adj_verts) IMPLIES
	     FORALL (us_nodes:
	               list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                         digraph_edges[nat], digraph_size[nat],
	                         digraph_make[nat]](curr)]):
	       us_nodes = usable_nodes(orig, curr, p, car(adj_verts)) IMPLIES
	        vert?[nat, digraph_type[nat], digraph_verts, digraph_edges,
	              digraph_size, digraph_make]
	            (K)(next_closest_node(K, v, us_nodes))
	
	% Subtype TCC generated (at line 76, column 82) for  adj_verts
	% expected type  (cons?)
	  % untried
	adaptive_rec_TCC4: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)],
	          p: nnreal):
	    NOT null?(adj_verts) IMPLIES
	     FORALL (us_nodes:
	               list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                         digraph_edges[nat], digraph_size[nat],
	                         digraph_make[nat]](curr)],
	             closest_node:
	               vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K)):
	       us_nodes = usable_nodes(orig, curr, p, car(adj_verts)) AND
	        closest_node = next_closest_node(K, v, us_nodes) AND
	         NOT null?(us_nodes) AND NOT closest_node = v
	        IMPLIES cons?[nat](adj_verts)
	
	% Subtype TCC generated (at line 76, column 148) for  adj_verts
	% expected type  (cons?[vert[nat, digraph_type[nat], digraph_verts,
	%             digraph_edges, digraph_size,
	%             digraph_make](curr)])
	  % untried
	adaptive_rec_TCC5: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)],
	          p: nnreal):
	    NOT null?(adj_verts) IMPLIES
	     FORALL (us_nodes:
	               list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                         digraph_edges[nat], digraph_size[nat],
	                         digraph_make[nat]](curr)],
	             closest_node:
	               vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K)):
	       us_nodes = usable_nodes(orig, curr, p, car(adj_verts)) AND
	        closest_node = next_closest_node(K, v, us_nodes) AND
	         (null?(us_nodes) OR
	           closest_node = v OR
	            edges[nat](curr)(car[nat](adj_verts), closest_node))
	        IMPLIES
	        cons?[vert[nat, digraph_type[nat], digraph_verts[nat],
	                   digraph_edges[nat], digraph_size[nat],
	                   digraph_make[nat]](curr)]
	            (adj_verts)
	
	% Termination TCC generated (at line 76, column 113) for
	% adaptive_rec(K, orig, v, curr, cdr(adj_verts), p)
	  % untried
	adaptive_rec_TCC6: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)],
	          p: nnreal):
	    NOT null?(adj_verts) IMPLIES
	     FORALL (us_nodes:
	               list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                         digraph_edges[nat], digraph_size[nat],
	                         digraph_make[nat]](curr)],
	             closest_node:
	               vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K)):
	       us_nodes = usable_nodes(orig, curr, p, car(adj_verts)) AND
	        closest_node = next_closest_node(K, v, us_nodes) AND
	         (null?(us_nodes) OR
	           closest_node = v OR
	            edges[nat](curr)(car[nat](adj_verts), closest_node))
	        IMPLIES
	        length
	            [vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                  digraph_size, digraph_make](curr)]
	            (cdr[vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                      digraph_size, digraph_make](curr)]
	                 (adj_verts))
	         <
	         length
	             [vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                   digraph_size, digraph_make](curr)]
	             (adj_verts)
	
	% Subtype TCC generated (at line 78, column 59) for  car(adj_verts)
	% expected type  (vert(curr))
	  % untried
	adaptive_rec_TCC7: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)],
	          p: nnreal):
	    NOT null?(adj_verts) IMPLIES
	     FORALL (us_nodes:
	               list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                         digraph_edges[nat], digraph_size[nat],
	                         digraph_make[nat]](curr)],
	             closest_node:
	               vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K)):
	            (us_nodes = usable_nodes(orig, curr, p, car(adj_verts)))
	        AND (closest_node = next_closest_node(K, v, us_nodes))
	        AND (NOT null?(us_nodes)) AND (NOT closest_node = v)
	        AND NOT edges[nat](curr)(car[nat](adj_verts), closest_node)
	        IMPLIES vert[nat](curr)(car[nat](adj_verts))
	
	% Subtype TCC generated (at line 78, column 75) for  closest_node
	% expected type  {v: (vert(curr)) | NOT edges(curr)(car(adj_verts), v)}
	  % untried
	adaptive_rec_TCC8: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)],
	          p: nnreal):
	    NOT null?(adj_verts) IMPLIES
	     FORALL (us_nodes:
	               list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                         digraph_edges[nat], digraph_size[nat],
	                         digraph_make[nat]](curr)],
	             closest_node:
	               vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K)):
	            (us_nodes = usable_nodes(orig, curr, p, car(adj_verts)))
	        AND (closest_node = next_closest_node(K, v, us_nodes))
	        AND (NOT null?(us_nodes)) AND (NOT closest_node = v)
	        AND NOT edges[nat](curr)(car[nat](adj_verts), closest_node)
	        IMPLIES vert[nat](curr)(closest_node)
	
	% Subtype TCC generated (at line 78, column 44) for
	% add_edge(curr, car(adj_verts), closest_node)
	% expected type  {D: di_subgraph(K) | vert(del_vert(orig)(v)) = vert(D)}
	  % untried
	adaptive_rec_TCC9: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)],
	          p: nnreal):
	    NOT null?(adj_verts) IMPLIES
	     FORALL (us_nodes:
	               list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                         digraph_edges[nat], digraph_size[nat],
	                         digraph_make[nat]](curr)],
	             closest_node:
	               vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K)):
	            (us_nodes = usable_nodes(orig, curr, p, car(adj_verts)))
	        AND (closest_node = next_closest_node(K, v, us_nodes))
	        AND (NOT null?(us_nodes)) AND (NOT closest_node = v)
	        AND NOT edges[nat](curr)(car[nat](adj_verts), closest_node)
	        IMPLIES
	        di_subgraph?
	            [nat, digraph_type[nat], digraph_verts[nat], digraph_edges[nat],
	             digraph_size[nat], digraph_make[nat]]
	            (add_edge[nat](curr, car[nat](adj_verts), closest_node), K)
	         AND
	         vert[nat](del_vert[nat](orig)(v)) =
	          vert[nat](add_edge[nat](curr, car[nat](adj_verts), closest_node))
	
	% Subtype TCC generated (at line 78, column 94) for  adj_verts
	% expected type  (cons?)
	  % untried
	adaptive_rec_TCC10: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)],
	          p: nnreal):
	    NOT null?(adj_verts) IMPLIES
	     FORALL (us_nodes:
	               list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                         digraph_edges[nat], digraph_size[nat],
	                         digraph_make[nat]](curr)],
	             closest_node:
	               vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K)):
	            (us_nodes = usable_nodes(orig, curr, p, car(adj_verts)))
	        AND (closest_node = next_closest_node(K, v, us_nodes))
	        AND (NOT null?(us_nodes)) AND (NOT closest_node = v)
	        AND NOT edges[nat](curr)(car[nat](adj_verts), closest_node)
	        IMPLIES
	        every[number]
	            (LAMBDA (x: number):
	                    number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	                AND integer_pred(x) AND (x >= 0)
	                AND vert?[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                          digraph_size, digraph_make]
	                        (add_edge[nat](curr, car[nat](adj_verts), closest_node))
	                        (x))
	            (adj_verts)
	         AND
	         cons?[vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](add_edge
	                                                (curr,
	                                                 car(adj_verts),
	                                                 closest_node))]
	             (adj_verts)
	
	% Termination TCC generated (at line 78, column 19) for
	% adaptive_rec(K, orig, v,
	%              add_edge(curr, car(adj_verts), closest_node),
	%              cdr(adj_verts), p)
	  % untried
	adaptive_rec_TCC11: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)],
	          p: nnreal):
	    NOT null?(adj_verts) IMPLIES
	     FORALL (us_nodes:
	               list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                         digraph_edges[nat], digraph_size[nat],
	                         digraph_make[nat]](curr)],
	             closest_node:
	               vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K)):
	            (us_nodes = usable_nodes(orig, curr, p, car(adj_verts)))
	        AND (closest_node = next_closest_node(K, v, us_nodes))
	        AND (NOT null?(us_nodes)) AND (NOT closest_node = v)
	        AND NOT edges[nat](curr)(car[nat](adj_verts), closest_node)
	        IMPLIES
	        length
	            [vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                  digraph_size, digraph_make](add_edge
	                                              (curr,
	                                               car(adj_verts),
	                                               closest_node))]
	            (cdr[vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                      digraph_size, digraph_make](add_edge
	                                                  (curr,
	                                                   car(adj_verts),
	                                                   closest_node))]
	                 (adj_verts))
	         <
	         length
	             [vert[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                   digraph_size, digraph_make](curr)]
	             (adj_verts)
	
	% Subtype TCC generated (at line 73, column 80) for  adj_verts
	% expected type  (cons?)
	  % untried
	adaptive_rec_TCC12: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)]):
	    NOT null?(adj_verts) IMPLIES cons?[nat](adj_verts)
	
	% Subtype TCC generated (at line 73, column 76) for  car(adj_verts)
	% expected type  vert[nat, digraph_type[nat], digraph_verts,
	%      digraph_edges, digraph_size, digraph_make](curr)
	  % untried
	adaptive_rec_TCC13: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)]):
	    NOT null?(adj_verts) IMPLIES
	     vert?[nat, digraph_type[nat], digraph_verts, digraph_edges, digraph_size,
	           digraph_make]
	         (curr)(car[nat](adj_verts))
	
	% Subtype TCC generated (at line 73, column 48) for
	% usable_nodes(orig, curr, p, car(adj_verts))
	% expected type  list[vert[nat, digraph_type[nat], digraph_verts,
	%           digraph_edges, digraph_size,
	%           digraph_make](curr)]
	  % untried
	adaptive_rec_TCC14: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K)},
	          v: (vert[nat](orig)),
	          curr:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](del_vert[nat](orig)(v)) = vert[nat](D)},
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)],
	          p: nnreal):
	    NOT null?(adj_verts) IMPLIES
	     every[number]
	         (LAMBDA (x: number):
	                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	             AND integer_pred(x) AND (x >= 0)
	             AND vert?[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                       digraph_size, digraph_make]
	                     (curr)(x))
	         (usable_nodes(orig, curr, p, car[nat](adj_verts)))
	
	% The subtype TCC (at line 70, column 169) in decl nil for
	% term generated from adaptive_rec  v
	% expected type  vert[nat, digraph_type[nat], digraph_verts,
	%      digraph_edges, digraph_size, digraph_make](orig)
	% The subtype TCC (at line 78, column 63) in decl nil for
	% term generated from adaptive_rec  adj_verts
	% expected type  (cons?)
	% The subtype TCC (at line 78, column 90) in decl nil for
	% term generated from adaptive_rec  cdr
	% expected type  (cons?)
	% The subtype TCC (at line 78, column 90) in decl nil for
	% term generated from adaptive_rec  cdr
	% expected type  (vert(curr))
	% The subtype TCC (at line 78, column 90) in decl nil for
	% term generated from adaptive_rec  cdr
	% expected type  {v: (vert(curr)) | NOT edges(curr)(car(adj_verts), v)}
	% Subtype TCC generated (at line 87, column 45) for  adjacent_verts(orig)(v)
	% expected type  list[vert[nat, digraph_type[nat], digraph_verts,
	%           digraph_edges, digraph_size,
	%           digraph_make](curr)]
	  % untried
	adaptive_algorithm_TCC1: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K) AND simple?[nat](D)},
	          v: (vert[nat](orig)), curr: c_digraph[nat]):
	    curr = del_vert(orig)(v) IMPLIES
	     every[number]
	         (LAMBDA (x: number):
	                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
	             AND integer_pred(x) AND (x >= 0)
	             AND vert?[nat, digraph_type[nat], digraph_verts, digraph_edges,
	                       digraph_size, digraph_make]
	                     (curr)(x))
	         (adjacent_verts[nat](orig)(v))
	
	% The subtype TCC (at line 70, column 169) in decl nil for
	 % term generated from adaptive_rec  v
	    % expected type  vert[nat, digraph_type[nat], digraph_verts,
	                   %      digraph_edges, digraph_size, digraph_make](orig)
	  % is subsumed by capacity_TCC1
	% The subtype TCC (at line 78, column 63) in decl nil for
	 % term generated from adaptive_rec  adj_verts
	    % expected type  (cons?)
	  % is subsumed by adaptive_rec_TCC4
	% The subtype TCC (at line 78, column 90) in decl nil for
	 % term generated from adaptive_rec  cdr
	    % expected type  (cons?)
	  % is subsumed by adaptive_rec_TCC4
	% The subtype TCC (at line 78, column 90) in decl nil for
	 % term generated from adaptive_rec  cdr
	    % expected type  (vert(curr))
	  % is subsumed by adaptive_rec_TCC7
	% The subtype TCC (at line 78, column 90) in decl nil for
	 % term generated from adaptive_rec  cdr
	    % expected type  {v: (vert(curr)) | NOT edges(curr)(car(adj_verts), v)}
	  % is subsumed by adaptive_rec_TCC8
	
	% Subtype TCC generated (at line 88, column 36) for  curr
	% expected type  {D: di_subgraph(K) | vert(del_vert(orig)(v)) = vert(D)}
	  % untried
	adaptive_algorithm_TCC2: OBLIGATION
	FORALL (K: {g: c_digraph[nat] | digr_looped_compl?[nat](g)},
	          orig:
	            {D:
	               di_subgraph
	                   [nat, digraph_type[nat], digraph_verts, digraph_edges,
	                    digraph_size, digraph_make](K) |
	               vert[nat](D) = vert[nat](K) AND simple?[nat](D)},
	          v: (vert[nat](orig)), curr: c_digraph[nat],
	          adj_verts:
	            list[vert[nat, digraph_type[nat], digraph_verts[nat],
	                      digraph_edges[nat], digraph_size[nat],
	                      digraph_make[nat]](curr)]):
	    curr = del_vert(orig)(v) AND adj_verts = adjacent_verts(orig)(v) IMPLIES
	     di_subgraph?
	         [nat, digraph_type[nat], digraph_verts[nat], digraph_edges[nat],
	          digraph_size[nat], digraph_make[nat]]
	         (curr, K)
	      AND vert[nat](del_vert[nat](orig)(v)) = vert[nat](curr)
	
	% The subtype TCC (at line 86, column 53) in decl nil for
	 % term generated from adaptive_algorithm  v
	    % expected type  vert[nat, digraph_type[nat], digraph_verts,
	                   %      digraph_edges, digraph_size, digraph_make](orig)
	  % is subsumed by capacity_TCC1

END adaptive_strategy_c_TCCS