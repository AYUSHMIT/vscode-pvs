%% TCCs associated with theory types_and_constants
%% This file was automatically generated by PVS, please **do not modify** by hand.
types_and_constants: THEORY BEGIN

	% Disjointness TCC generated (at line 53, column 9) for
	% COND x = a0 -> accounts`a0,
	%      x = a1 -> accounts`a1,
	%      x = a2 -> accounts`a2,
	%      x = a3 -> accounts`a3,
	%      x = a4 -> accounts`a4,
	%      x = a5 -> accounts`a5,
	%      x = a6 -> accounts`a6,
	%      x = a7 -> accounts`a7,
	%      x = a8 -> accounts`a8,
	%      x = a9 -> accounts`a9
	% ENDCOND
	  % unproved
	conv2_TCC1: OBLIGATION
	FORALL (x: AccountNo):
	         (NOT (x = a0 AND x = a1)) AND (NOT (x = a0 AND x = a2))
	     AND (NOT (x = a0 AND x = a3)) AND (NOT (x = a0 AND x = a4))
	     AND (NOT (x = a0 AND x = a5)) AND (NOT (x = a0 AND x = a6))
	     AND (NOT (x = a0 AND x = a7)) AND (NOT (x = a0 AND x = a8))
	     AND (NOT (x = a0 AND x = a9)) AND (NOT (x = a1 AND x = a2))
	     AND (NOT (x = a1 AND x = a3)) AND (NOT (x = a1 AND x = a4))
	     AND (NOT (x = a1 AND x = a5)) AND (NOT (x = a1 AND x = a6))
	     AND (NOT (x = a1 AND x = a7)) AND (NOT (x = a1 AND x = a8))
	     AND (NOT (x = a1 AND x = a9)) AND (NOT (x = a2 AND x = a3))
	     AND (NOT (x = a2 AND x = a4)) AND (NOT (x = a2 AND x = a5))
	     AND (NOT (x = a2 AND x = a6)) AND (NOT (x = a2 AND x = a7))
	     AND (NOT (x = a2 AND x = a8)) AND (NOT (x = a2 AND x = a9))
	     AND (NOT (x = a3 AND x = a4)) AND (NOT (x = a3 AND x = a5))
	     AND (NOT (x = a3 AND x = a6)) AND (NOT (x = a3 AND x = a7))
	     AND (NOT (x = a3 AND x = a8)) AND (NOT (x = a3 AND x = a9))
	     AND (NOT (x = a4 AND x = a5)) AND (NOT (x = a4 AND x = a6))
	     AND (NOT (x = a4 AND x = a7)) AND (NOT (x = a4 AND x = a8))
	     AND (NOT (x = a4 AND x = a9)) AND (NOT (x = a5 AND x = a6))
	     AND (NOT (x = a5 AND x = a7)) AND (NOT (x = a5 AND x = a8))
	     AND (NOT (x = a5 AND x = a9)) AND (NOT (x = a6 AND x = a7))
	     AND (NOT (x = a6 AND x = a8)) AND (NOT (x = a6 AND x = a9))
	     AND (NOT (x = a7 AND x = a8)) AND (NOT (x = a7 AND x = a9))
	     AND NOT (x = a8 AND x = a9)
	
	% Coverage TCC generated (at line 53, column 9) for
	% COND x = a0 -> accounts`a0,
	%      x = a1 -> accounts`a1,
	%      x = a2 -> accounts`a2,
	%      x = a3 -> accounts`a3,
	%      x = a4 -> accounts`a4,
	%      x = a5 -> accounts`a5,
	%      x = a6 -> accounts`a6,
	%      x = a7 -> accounts`a7,
	%      x = a8 -> accounts`a8,
	%      x = a9 -> accounts`a9
	% ENDCOND
	  % unproved
	conv2_TCC2: OBLIGATION
	FORALL (x: AccountNo):
	         (x = a0) OR (x = a1) OR (x = a2) OR (x = a3) OR (x = a4) OR (x = a5)
	     OR (x = a6) OR (x = a7) OR (x = a8) OR (x = a9)
	
	% Subtype TCC generated (at line 105, column 24) for  0
	% expected type  below[length(sequence)]
	  % unproved
	memberfs_TCC1[T: TYPE]: OBLIGATION
	FORALL (item: T, sequence: finseq[T]):
	    NOT sequence = empty_seq IMPLIES 0 < sequence`length
	
	% Termination TCC generated (at line 107, column 10) for
	% memberfs(item, ^^(sequence, (1, sequence`length)))
	  % unproved
	memberfs_TCC2[T: TYPE]: OBLIGATION
	FORALL (item: T, sequence: finseq[T]):
	    NOT item = finseq_appl[T](sequence)(0) AND NOT sequence = empty_seq IMPLIES
	     (^^[T](sequence, (1, sequence`length)))`length < sequence`length
	
	% Subtype TCC generated (at line 127, column 58) for  null
	% expected type  list[Transaction]
	  % unproved
	TQ_init_TCC1: OBLIGATION
	every[[# deployer: (a9?), gas: real #]]
	      (LAMBDA (t: [# deployer: AccountNo, gas: real #]):
	         rational_pred(t`gas) AND integer_pred(t`gas) AND t`gas >= 0)
	      (null[[# deployer: (a9?), gas: real #]])
	
	

END types_and_constants