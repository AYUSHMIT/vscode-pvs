(pump_th
 (vtbi_over_rate_lemma_TCC1 0
  (vtbi_over_rate_lemma_TCC1-1 nil 3808815956
   ("" (then (subtype-tcc)) nil) nil nil
   (vtbi_over_rate_lemma subtype "pump_th.r" "nznum")))
 (vtbi_over_rate_lemma 0
  (vtbi_over_rate_lemma-1 nil 3808820925 ("" (postpone) nil nil) nil
   shostak))
 (vtbi_over_time_lemma 0
  (vtbi_over_time_lemma-1 nil 3808820925 ("" (postpone) nil nil) nil
   shostak))
 (mains_switch_TCC1 0
  (mains_switch_TCC1-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (mains_switch subtype "0"
    "pausetime[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (on_TCC1 0
  (on_TCC1-1 nil 3808815956 ("" (then (cond-disjoint-tcc)) nil) nil nil
   (on disjointness
    "COND (booleans.NOT)(powered_on?(pump_th.st)) -> pump_th.st WITH [powered_on? := booleans.TRUE, infusing? := booleans.FALSE, elapse := 0, kvoflag := booleans.FALSE], powered_on?(pump_th.st) -> pump_th.st WITH [powered_on? := booleans.FALSE, infusing? := booleans.FALSE] ENDCOND"
    "nil")))
 (start_TCC1 0
  (start_TCC1-1 nil 3808815956 ("" (then (cond-disjoint-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (per_start const-decl "bool" pump_th nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (start disjointness
    "COND booleans.&(kvoflag(pump_th.st), (vtbi(pump_th.st) /= 0)) -> pump_th.st WITH [infusing? := booleans.TRUE, kvoflag := booleans.FALSE], booleans.&(kvoflag(pump_th.st), (vtbi(pump_th.st) = 0)) -> pump_th.st WITH [infusing? := booleans.TRUE], booleans.&((booleans.NOT)(kvoflag(pump_th.st)), (booleans.OR((vtbi(pump_th.st) = 0), (infusionrate(pump_th.st) = 0)))) -> pump_th.st WITH [infusing? := booleans.FALSE], booleans.&((booleans.NOT)(kvoflag(pump_th.st)), (vtbi(pump_th.st) /= 0)) -> pump_th.st WITH [infusing? := booleans.TRUE] ENDCOND"
    "nil")))
 (start_TCC2 0
  (start_TCC2-1 nil 3808815956 ("" (then (cond-coverage-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (per_start const-decl "bool" pump_th nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (start coverage
    "COND booleans.&(kvoflag(pump_th.st), (vtbi(pump_th.st) /= 0)) -> pump_th.st WITH [infusing? := booleans.TRUE, kvoflag := booleans.FALSE], booleans.&(kvoflag(pump_th.st), (vtbi(pump_th.st) = 0)) -> pump_th.st WITH [infusing? := booleans.TRUE], booleans.&((booleans.NOT)(kvoflag(pump_th.st)), (booleans.OR((vtbi(pump_th.st) = 0), (infusionrate(pump_th.st) = 0)))) -> pump_th.st WITH [infusing? := booleans.FALSE], booleans.&((booleans.NOT)(kvoflag(pump_th.st)), (vtbi(pump_th.st) /= 0)) -> pump_th.st WITH [infusing? := booleans.TRUE] ENDCOND"
    "nil")))
 (tick_case_infuse_and_infusionrateLvtbi_TCC1 0
  (tick_case_infuse_and_infusionrateLvtbi_TCC1-1 nil 3808815956
   ("" (then (subtype-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (tick_case_infuse_and_infusionrateLvtbi subtype
    "(number_fields.-)(battery(pump_th.st), 1)"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (tick_case_infuse_and_infusionrateLvtbi_TCC2 0
  (tick_case_infuse_and_infusionrateLvtbi_TCC2-1 nil 3808815956
   ("" (then (cond-disjoint-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (tick_case_infuse_and_infusionrateLvtbi disjointness
    "COND booleans.&(ac_connect(pump_th.st), (reals.<(battery(pump_th.st), pump_th.bat_max))) -> (number_fields.+)(battery(pump_th.st), 1), booleans.&((booleans.NOT)(ac_connect(pump_th.st)), (reals.>((number_fields.-)(battery(pump_th.st), 1), 0))) -> (number_fields.-)(battery(pump_th.st), 1), ELSE -> battery(pump_th.st) ENDCOND"
    "nil")))
 (tick_case_infuse_and_infusionrateLvtbi_TCC3 0
  (tick_case_infuse_and_infusionrateLvtbi_TCC3-1 nil 3808815956
   ("" (then (subtype-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (tick_case_infuse_and_infusionrateLvtbi subtype
    "infusionrate(pump_th.st)" "nznum")))
 (tick_case_infuse_and_infusionrateLvtbi_TCC4 0
  (tick_case_infuse_and_infusionrateLvtbi_TCC4-1 nil 3808815956
   ("" (subtype-tcc) nil nil) nil nil
   (tick_case_infuse_and_infusionrateLvtbi subtype
    "number_fields./(((number_fields.-)(vtbi(pump_th.st), infusionrate(pump_th.st))), infusionrate(pump_th.st))"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (tick_case_infuse_and_infusionrateLvtbi_TCC5 0
  (tick_case_infuse_and_infusionrateLvtbi_TCC5-1 nil 3808815956
   ("" (then (subtype-tcc)) nil) nil nil
   (tick_case_infuse_and_infusionrateLvtbi subtype
    "(number_fields.-)(vtbi(pump_th.st), infusionrate(pump_th.st))"
    "ivols[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag_TCC1 0
  (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag_TCC1-1 nil
   3808815956 ("" (then (subtype-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag subtype
    "(number_fields.-)(battery(pump_th.st), 1)"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag_TCC2 0
  (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag_TCC2-1 nil
   3808815956 ("" (then (cond-disjoint-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag disjointness
    "COND booleans.&(ac_connect(pump_th.st), (reals.<(battery(pump_th.st), pump_th.bat_max))) -> (number_fields.+)(battery(pump_th.st), 1), booleans.&(ac_connect(pump_th.st), (reals.>=(battery(pump_th.st), pump_th.bat_max))) -> pump_th.bat_max, booleans.&((booleans.NOT)(ac_connect(pump_th.st)), (reals.>((number_fields.-)(battery(pump_th.st), 1), 0))) -> (number_fields.-)(battery(pump_th.st), 1), booleans.&((booleans.NOT)(ac_connect(pump_th.st)), (booleans.NOT)((reals.>((number_fields.-)(battery(pump_th.st), 1), 0)))) -> 0 ENDCOND"
    "nil")))
 (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag_TCC3 0
  (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag_TCC3-1 nil
   3808815956 ("" (then (cond-coverage-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag coverage
    "COND booleans.&(ac_connect(pump_th.st), (reals.<(battery(pump_th.st), pump_th.bat_max))) -> (number_fields.+)(battery(pump_th.st), 1), booleans.&(ac_connect(pump_th.st), (reals.>=(battery(pump_th.st), pump_th.bat_max))) -> pump_th.bat_max, booleans.&((booleans.NOT)(ac_connect(pump_th.st)), (reals.>((number_fields.-)(battery(pump_th.st), 1), 0))) -> (number_fields.-)(battery(pump_th.st), 1), booleans.&((booleans.NOT)(ac_connect(pump_th.st)), (booleans.NOT)((reals.>((number_fields.-)(battery(pump_th.st), 1), 0)))) -> 0 ENDCOND"
    "nil")))
 (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag_TCC4 0
  (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag_TCC4-1 nil
   3808815956 ("" (then (cond-disjoint-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag disjointness
    "COND reals.<(infusionrate(pump_th.st), pump_th.infusemin) -> infusionrate(pump_th.st), reals.>=(infusionrate(pump_th.st), pump_th.infusemin) -> pump_th.infusemin ENDCOND"
    "nil")))
 (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag_TCC5 0
  (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag_TCC5-1 nil
   3808815956 ("" (then (cond-coverage-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag coverage
    "COND reals.<(infusionrate(pump_th.st), pump_th.infusemin) -> infusionrate(pump_th.st), reals.>=(infusionrate(pump_th.st), pump_th.infusemin) -> pump_th.infusemin ENDCOND"
    "nil")))
 (tick_case_infuse_and_infusionrateGEvtbi_kvoflag_TCC1 0
  (tick_case_infuse_and_infusionrateGEvtbi_kvoflag_TCC1-1 nil
   3808815956 ("" (then (subtype-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (tick_case_infuse_and_infusionrateGEvtbi_kvoflag subtype
    "(number_fields.-)(battery(pump_th.st), 1)"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (tick_case_infuse_and_infusionrateGEvtbi_kvoflag_TCC2 0
  (tick_case_infuse_and_infusionrateGEvtbi_kvoflag_TCC2-1 nil
   3808815956 ("" (then (cond-disjoint-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (tick_case_infuse_and_infusionrateGEvtbi_kvoflag disjointness
    "COND booleans.&(ac_connect(pump_th.st), (reals.<(battery(pump_th.st), pump_th.bat_max))) -> (number_fields.+)(battery(pump_th.st), 1), booleans.&(ac_connect(pump_th.st), (reals.>=(battery(pump_th.st), pump_th.bat_max))) -> pump_th.bat_max, booleans.&((booleans.NOT)(ac_connect(pump_th.st)), (reals.>((number_fields.-)(battery(pump_th.st), 1), 0))) -> (number_fields.-)(battery(pump_th.st), 1), booleans.&((booleans.NOT)(ac_connect(pump_th.st)), (booleans.NOT)((reals.>((number_fields.-)(battery(pump_th.st), 1), 0)))) -> 0 ENDCOND"
    "nil")))
 (tick_case_infuse_and_infusionrateGEvtbi_kvoflag_TCC3 0
  (tick_case_infuse_and_infusionrateGEvtbi_kvoflag_TCC3-1 nil
   3808815956 ("" (then (cond-coverage-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (tick_case_infuse_and_infusionrateGEvtbi_kvoflag coverage
    "COND booleans.&(ac_connect(pump_th.st), (reals.<(battery(pump_th.st), pump_th.bat_max))) -> (number_fields.+)(battery(pump_th.st), 1), booleans.&(ac_connect(pump_th.st), (reals.>=(battery(pump_th.st), pump_th.bat_max))) -> pump_th.bat_max, booleans.&((booleans.NOT)(ac_connect(pump_th.st)), (reals.>((number_fields.-)(battery(pump_th.st), 1), 0))) -> (number_fields.-)(battery(pump_th.st), 1), booleans.&((booleans.NOT)(ac_connect(pump_th.st)), (booleans.NOT)((reals.>((number_fields.-)(battery(pump_th.st), 1), 0)))) -> 0 ENDCOND"
    "nil")))
 (tick_TCC1 0
  (tick_TCC1-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (per_tick const-decl "boolean" pump_th nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (tick subtype "pump_th.st"
    "{st: pump_th.pump | booleans.&(infusing?(st), reals.>(((number_fields.-)(vtbi(st), infusionrate(st))), 0))}")))
 (tick_TCC2 0
  (tick_TCC2-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (per_tick const-decl "boolean" pump_th nil))
   nil
   (tick subtype "pump_th.st"
    "{st: pump_th.pump | booleans.&(infusing?(st), booleans.&(reals.>=(infusionrate(st), vtbi(st)), (booleans.NOT)(kvoflag(st))))}")))
 (tick_TCC3 0
  (tick_TCC3-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (per_tick const-decl "boolean" pump_th nil))
   nil
   (tick subtype "pump_th.st"
    "{st: pump_th.pump | booleans.&(infusing?(st), booleans.&(reals.>=(infusionrate(st), vtbi(st)), kvoflag(st)))}")))
 (tick_TCC4 0
  (tick_TCC4-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (per_tick const-decl "boolean" pump_th nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (tick subtype "(number_fields.+)(elapse(pump_th.st), 1)"
    "pausetime[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (tick_TCC5 0
  (tick_TCC5-1 nil 3808815956 ("" (then (cond-disjoint-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (per_tick const-decl "boolean" pump_th nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (tick disjointness
    "COND booleans.&(infusing?(pump_th.st), reals.<(infusionrate(pump_th.st), vtbi(pump_th.st))) -> pump_th.tick_case_infuse_and_infusionrateLvtbi(pump_th.st), booleans.&(infusing?(pump_th.st), booleans.&(reals.>=(infusionrate(pump_th.st), vtbi(pump_th.st)), (booleans.NOT)(kvoflag(pump_th.st)))) -> pump_th.tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag(pump_th.st), booleans.&(infusing?(pump_th.st), booleans.&(reals.>=(infusionrate(pump_th.st), vtbi(pump_th.st)), kvoflag(pump_th.st))) -> pump_th.tick_case_infuse_and_infusionrateGEvtbi_kvoflag(pump_th.st), (booleans.NOT)(infusing?(pump_th.st)) -> pump_th.st WITH [elapse := (number_fields.+)(elapse(pump_th.st), 1)] ENDCOND"
    "nil")))
 (tick_TCC6 0
  (tick_TCC6-1 nil 3808815956 ("" (then (cond-coverage-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (per_tick const-decl "boolean" pump_th nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (tick coverage
    "COND booleans.&(infusing?(pump_th.st), reals.<(infusionrate(pump_th.st), vtbi(pump_th.st))) -> pump_th.tick_case_infuse_and_infusionrateLvtbi(pump_th.st), booleans.&(infusing?(pump_th.st), booleans.&(reals.>=(infusionrate(pump_th.st), vtbi(pump_th.st)), (booleans.NOT)(kvoflag(pump_th.st)))) -> pump_th.tick_case_infuse_and_infusionrateGEvtbi_NOTkvoflag(pump_th.st), booleans.&(infusing?(pump_th.st), booleans.&(reals.>=(infusionrate(pump_th.st), vtbi(pump_th.st)), kvoflag(pump_th.st))) -> pump_th.tick_case_infuse_and_infusionrateGEvtbi_kvoflag(pump_th.st), (booleans.NOT)(infusing?(pump_th.st)) -> pump_th.st WITH [elapse := (number_fields.+)(elapse(pump_th.st), 1)] ENDCOND"
    "nil")))
 (maxvtbi_TCC1 0
  (maxvtbi_TCC1-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (maxvtbi subtype "infusionrate(pump_th.st)" "nznum")))
 (maxvtbi_TCC2 0
  (maxvtbi_TCC2-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (maxvtbi subtype
    "number_fields./(pump_th.maxinfuse, infusionrate(pump_th.st))"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (maxhvtbi_TCC1 0
  (maxhvtbi_TCC1-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (maxhvtbi subtype "time(pump_th.st)" "nznum")))
 (maxhvtbi_TCC2 0
  (maxhvtbi_TCC2-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (maxhvtbi subtype
    "number_fields./(pump_th.maxinfuse, time(pump_th.st))"
    "irates[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (modvtbi_TCC1 0
  (modvtbi_TCC1-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (modvtbi subtype
    "number_fields./(pump_th.x, infusionrate(pump_th.st))"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (modhvtbi_TCC1 0
  (modhvtbi_TCC1-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (modhvtbi subtype "number_fields./(pump_th.x, time(pump_th.st))"
    "irates[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (pbsvtbi_TCC1 0
  (pbsvtbi_TCC1-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (pbsvtbi subtype
    "number_fields./(((number_fields.+)(vtbi(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep)), infusionrate(pump_th.st))"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (pbshvtbi_TCC1 0
  (pbshvtbi_TCC1-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (pbshvtbi subtype
    "number_fields./(((number_fields.+)(vtbi(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep)), time(pump_th.st))"
    "irates[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (pivtbi_TCC1 0
  (pivtbi_TCC1-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (pivtbi subtype
    "number_fields./(((number_fields.+)(vtbi(pump_th.st), 1)), infusionrate(pump_th.st))"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (pihvtbi_TCC1 0
  (pihvtbi_TCC1-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (pihvtbi subtype
    "number_fields./(((number_fields.+)(vtbi(pump_th.st), 1)), time(pump_th.st))"
    "irates[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mbsvtbi_TCC1 0
  (mbsvtbi_TCC1-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (mbsvtbi subtype
    "number_fields./(((number_fields.-)(vtbi(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep)), infusionrate(pump_th.st))"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mbsvtbi_TCC2 0
  (mbsvtbi_TCC2-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil))
   nil
   (mbsvtbi subtype
    "(number_fields.-)(vtbi(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep)"
    "ivols[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mbshvtbi_TCC1 0
  (mbshvtbi_TCC1-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (mbshvtbi subtype
    "number_fields./(((number_fields.-)(vtbi(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep)), time(pump_th.st))"
    "irates[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mdvtbi_TCC1 0
  (mdvtbi_TCC1-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (mdvtbi subtype
    "number_fields./(((number_fields.-)(vtbi(pump_th.st), 1)), infusionrate(pump_th.st))"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mdvtbi_TCC2 0
  (mdvtbi_TCC2-1 nil 3808815956 ("" (then (subtype-tcc)) nil) nil nil
   (mdvtbi subtype "(number_fields.-)(vtbi(pump_th.st), 1)"
    "ivols[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mdhvtbi_TCC1 0
  (mdhvtbi_TCC1-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (mdhvtbi subtype
    "number_fields./(((number_fields.-)(vtbi(pump_th.st), 1)), time(pump_th.st))"
    "irates[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (modtime_TCC1 0
  (modtime_TCC1-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (/= const-decl "boolean" notequal nil))
   nil (modtime subtype "pump_th.x" "nznum")))
 (modtime_TCC2 0
  (modtime_TCC2-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (modtime subtype "number_fields./(vtbi(pump_th.st), pump_th.x)"
    "irates[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (pbstime_TCC1 0
  (pbstime_TCC1-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil))
   nil
   (pbstime subtype
    "((number_fields.+)(time(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep))"
    "nznum")))
 (pbstime_TCC2 0
  (pbstime_TCC2-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil
   (pbstime subtype
    "number_fields./(vtbi(pump_th.st), ((number_fields.+)(time(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep)))"
    "irates[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mbstime_TCC1 0
  (mbstime_TCC1-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil))
   nil
   (mbstime subtype
    "((number_fields.-)(time(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep))"
    "nznum")))
 (mbstime_TCC2 0
  (mbstime_TCC2-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (mbstime subtype
    "number_fields./(vtbi(pump_th.st), ((number_fields.-)(time(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep)))"
    "irates[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mbstime_TCC3 0
  (mbstime_TCC3-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil))
   nil
   (mbstime subtype
    "(number_fields.-)(time(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep)"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mdtime_TCC1 0
  (mdtime_TCC1-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (mdtime subtype "((number_fields.-)(time(pump_th.st), 1))"
    "nznum")))
 (mdtime_TCC2 0
  (mdtime_TCC2-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (mdtime subtype
    "number_fields./(vtbi(pump_th.st), ((number_fields.-)(time(pump_th.st), 1)))"
    "irates[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mdtime_TCC3 0
  (mdtime_TCC3-1 nil 3808815956 ("" (then (subtype-tcc)) nil) nil nil
   (mdtime subtype "(number_fields.-)(time(pump_th.st), 1)"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (pbsrate_TCC1 0
  (pbsrate_TCC1-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil))
   nil
   (pbsrate subtype
    "((number_fields.+)(infusionrate(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep))"
    "nznum")))
 (pbsrate_TCC2 0
  (pbsrate_TCC2-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil
   (pbsrate subtype
    "number_fields./(vtbi(pump_th.st), ((number_fields.+)(infusionrate(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep)))"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mbsrate_TCC1 0
  (mbsrate_TCC1-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil))
   nil
   (mbsrate subtype
    "(number_fields.-)(infusionrate(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep)"
    "irates[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mbsrate_TCC2 0
  (mbsrate_TCC2-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bigstep const-decl "nat" types_and_constants_th nil))
   nil
   (mbsrate subtype
    "((number_fields.-)(infusionrate(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep))"
    "nznum")))
 (mbsrate_TCC3 0
  (mbsrate_TCC3-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (mbsrate subtype
    "number_fields./(vtbi(pump_th.st), ((number_fields.-)(infusionrate(pump_th.st), types_and_constants_th[pump_th.maxrate, pump_th.maxinfuse, pump_th.infusemin, pump_th.timeout, pump_th.shorttimeout, pump_th.maxtime, pump_th.bat_max, pump_th.bat_min].bigstep)))"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mdrate_TCC1 0
  (mdrate_TCC1-1 nil 3808815956 ("" (then (subtype-tcc)) nil) nil nil
   (mdrate subtype "(number_fields.-)(infusionrate(pump_th.st), 1)"
    "irates[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (mdrate_TCC2 0
  (mdrate_TCC2-1 nil 3808815956 ("" (then (subtype-tcc)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (maxrate formal-const-decl "posnat" pump_th nil)
    (maxinfuse formal-const-decl "posnat" pump_th nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (infusemin formal-const-decl
     "{infusemin: posreal | infusemin <= maxinfuse}" pump_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (timeout formal-const-decl "nat" pump_th nil)
    (shorttimeout formal-const-decl "nat" pump_th nil)
    (maxtime formal-const-decl "{maxtime: posnat | maxtime > timeout}"
     pump_th nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bat_max formal-const-decl
     "{bat_max: posnat | bat_max + 1 < maxtime}" pump_th nil)
    (bat_min formal-const-decl "{bat_min: posnat | bat_min < bat_max}"
     pump_th nil)
    (itimes type-eq-decl nil types_and_constants_th nil)
    (pausetime type-eq-decl nil types_and_constants_th nil)
    (irates type-eq-decl nil types_and_constants_th nil)
    (ivols type-eq-decl nil types_and_constants_th nil)
    (pump type-eq-decl nil pump_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (mdrate subtype "((number_fields.-)(infusionrate(pump_th.st), 1))"
    "nznum")))
 (mdrate_TCC3 0
  (mdrate_TCC3-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (mdrate subtype
    "number_fields./(vtbi(pump_th.st), ((number_fields.-)(infusionrate(pump_th.st), 1)))"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (modratevtbi_TCC1 0
  (modratevtbi_TCC1-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (modratevtbi subtype "number_fields./(pump_th.y, pump_th.x)"
    "itimes[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]")))
 (modvtbitime_TCC1 0
  (modvtbitime_TCC1-1 nil 3808815956 ("" (subtype-tcc) nil nil) nil nil
   (modvtbitime subtype "number_fields./(pump_th.x, pump_th.y)"
    "irates[maxrate, maxinfuse, infusemin, timeout, shorttimeout, maxtime, bat_max, bat_min]"))))

