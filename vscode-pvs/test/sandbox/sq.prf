(sq
 (sq_TCC1 0
  (sq_TCC1-1 nil 3808758193 ("" (then (ground)) nil) nil nil
   (sq subtype "number_fields.*(sq.a, sq.a)" "nonneg_real")))
 (sq_neg 0
  (sq_neg-1 nil 3808758193 ("" (then (grind)) nil nil) nil nil))
 (sq_pos 0
  (sq_pos-1 nil 3808758193 ("" (then (grind)) nil nil) nil nil))
 (sq_plus_pos 0
  (sq_plus_pos-1 nil 3808758193
   ("" (then (grind :theories ("sq" "real_props"))) nil nil) nil nil))
 (sq_times 0
  (sq_times-1 nil 3808758193 ("" (then (grind)) nil nil) nil nil))
 (sq_plus 0
  (sq_plus-1 nil 3808758193 ("" (then (grind)) nil nil) nil nil))
 (sq_minus 0
  (sq_minus-1 nil 3808758193 ("" (then (grind)) nil nil) nil nil))
 (sq_neg_minus 0
  (sq_neg_minus-1 nil 3808758193 ("" (then (grind)) nil nil) nil nil))
 (sq_0 0
  (sq_0-1 nil 3808758193
   ("" (then (grind :theories ("sq" "real_props"))) nil nil) nil nil))
 (sq_eq_0 0
  (sq_eq_0-1 nil 3808758193
   ("" (then (grind :theories ("sq" "real_props"))) nil nil) nil nil))
 (sq_gt_0 0
  (sq_gt_0-1 nil 3808758193
   ("" (then (grind :theories ("sq" "real_props"))) nil nil) nil nil))
 (sq_div_TCC1 0
  (sq_div_TCC1-1 nil 3808758193
   ("" (then (skolem 1 "d") (ground) (rewrite "sq_eq_0")) nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_eq_0 formula-decl nil sq nil))
   nil (sq_div subtype "sq.sq(sq.d)" "nznum")))
 (sq_div 0
  (sq_div-1 nil 3808758193 ("" (then (grind)) nil nil) nil nil))
 (sq_plus_eq_0 0
  (sq_plus_eq_0-1 nil 3808758193
   ("" (skosimp)
    (("" (ground)
      (("1"
        (grind-with-lemmas :theories ("sq" "real_props") :if-match all
         :lazy-match? nil :lemmas "sq_eq_0")
        nil nil)
       ("2"
        (grind-with-lemmas :theories ("sq" "real_props") :if-match all
         :lazy-match? nil :lemmas "sq_eq_0")
        nil nil)
       ("3"
        (grind-with-lemmas :theories ("sq" "real_props") :if-match all
         :lazy-match? nil :lemmas "sq_eq_0")
        nil nil))
      nil))
    nil)
   nil nil))
 (sq_ge 0
  (sq_ge-1 nil 3808758193
   ("" (skosimp)
    (("" (ground)
      (("1" (expand "sq")
        (("1" (case "forall (x,y:real): x>=y iff not x<y")
          (("1" (auto-rewrite -1) (("1" (grind-arith) nil nil)) nil)
           ("2" (skosimp) (("2" (ground) nil nil)) nil))
          nil))
        nil)
       ("2" (grind-arith) nil nil))
      nil))
    nil)
   nil nil))
 (sq_le 0
  (sq_le-1 nil 3808758193
   ("" (skosimp)
    (("" (lemma "sq_ge")
      (("" (inst - "nnb!1" "nna!1") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil nil))
 (sq_gt 0
  (sq_gt-1 nil 3808758193
   ("" (skosimp)
    (("" (lemma "sq_le")
      (("" (inst - "nna!1" "nnb!1") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil nil))
 (sq_lt 0
  (sq_lt-1 nil 3808758193
   ("" (skosimp)
    (("" (lemma "sq_gt")
      (("" (inst - "nnb!1" "nna!1") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil nil))
 (sq_eq 0
  (sq_eq-1 nil 3808758193
   ("" (skosimp)
    (("" (lemma "sq_ge")
      (("" (inst-cp - "nna!1" "nnb!1")
        (("" (inst - "nnb!1" "nna!1") (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil))
 (sq_neg_pos_le 0
  (sq_neg_pos_le-1 nil 3808758193
   ("" (skolem 1 ("a" "c"))
    (("" (case "a >= 0")
      (("1" (lemma "sq_le")
        (("1" (inst -1 "a" "c") (("1" (ground) nil nil)) nil)) nil)
       ("2" (lemma "sq_le")
        (("2" (inst -1 "-a" "c")
          (("1" (case-replace "sq(-a) = sq(a)")
            (("1" (hide -1) (("1" (ground) nil nil)) nil)
             ("2" (hide -1 3)
              (("2" (expand "sq") (("2" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (neg_pos_sq_le 0
  (neg_pos_sq_le-1 nil 3808758193
   ("" (skolem 1 ("a" "b"))
    (("" (ground)
      (("" (case "a > 0")
        (("1" (lemma "sq_le")
          (("1" (inst -1 "a" "b")
            (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
          nil)
         ("2" (case "-a <= b")
          (("1" (lemma "sq_le")
            (("1" (inst -1 "-a" "b")
              (("1" (ground) (("1" (rewrite "sq_neg") nil nil)) nil)
               ("2" (ground) nil nil))
              nil))
            nil)
           ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (sq_neg_pos_lt 0
  (sq_neg_pos_lt-1 nil 3808758193
   ("" (skolem 1 ("a" "c"))
    (("" (case "a >= 0")
      (("1" (lemma "sq_lt")
        (("1" (inst -1 "a" "c") (("1" (ground) nil nil)) nil)) nil)
       ("2" (lemma "sq_lt")
        (("2" (inst -1 "-a" "c")
          (("1" (case-replace "sq(-a) = sq(a)")
            (("1" (ground) nil nil)
             ("2" (hide -1 3)
              (("2" (expand "sq") (("2" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (neg_pos_sq_lt 0
  (neg_pos_sq_lt-1 nil 3808758193
   ("" (skolem 1 ("a" "b"))
    (("" (ground)
      (("" (case "a > 0")
        (("1" (lemma "sq_lt")
          (("1" (inst -1 "a" "b")
            (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
          nil)
         ("2" (case "-a < b")
          (("1" (lemma "sq_lt")
            (("1" (inst -1 "-a" "b")
              (("1" (ground) (("1" (rewrite "sq_neg") nil nil)) nil)
               ("2" (ground) nil nil))
              nil))
            nil)
           ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (sq_le_abs 0
  (sq_le_abs-1 nil 3808758193
   ("" (skosimp*)
    (("" (case-replace "b!1 >= 0")
      (("1" (lemma "sq_neg_pos_le")
        (("1" (inst?)
          (("1" (expand "abs")
            (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (lemma "sq_neg_pos_le")
        (("2" (inst -1 "a!1" "-b!1")
          (("1" (case-replace "sq(-b!1) = sq(b!1)")
            (("1" (hide -1)
              (("1" (expand "abs")
                (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
              nil)
             ("2" (hide -1 3)
              (("2" (expand "sq") (("2" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (sq_lt_abs 0
  (sq_lt_abs-1 nil 3808758193
   ("" (skosimp*)
    (("" (case-replace "b!1 >= 0")
      (("1" (lemma "sq_neg_pos_lt")
        (("1" (inst?)
          (("1" (expand "abs")
            (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (lemma "sq_neg_pos_lt")
        (("2" (inst -1 "a!1" "-b!1")
          (("1" (case-replace "sq(-b!1) = sq(b!1)")
            (("1" (hide -1)
              (("1" (expand "abs")
                (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
              nil)
             ("2" (hide -1 3)
              (("2" (expand "sq") (("2" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (sq_eq_abs 0
  (sq_eq_abs-1 nil 3808758193
   ("" (skosimp*)
    (("" (case "a!1 >= 0")
      (("1" (case "b!1 >= 0")
        (("1" (rewrite "sq_eq") (("1" (grind) nil nil)) nil)
         ("2" (case-replace "sq(b!1) = sq(-b!1)")
          (("1" (hide -1)
            (("1" (rewrite "sq_eq") (("1" (grind) nil nil)) nil)) nil)
           ("2" (hide 3)
            (("2" (expand "sq") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (case "b!1 >= 0")
        (("1" (case-replace "sq(a!1) = sq(-a!1)")
          (("1" (hide -1)
            (("1" (rewrite "sq_eq") (("1" (grind) nil nil)) nil)) nil)
           ("2" (hide 3)
            (("2" (expand "sq") (("2" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (case-replace "sq(a!1) = sq(-a!1)")
          (("1" (case-replace "sq(b!1) = sq(-b!1)")
            (("1" (hide -1 -2)
              (("1" (rewrite "sq_eq") (("1" (grind) nil nil)) nil))
              nil)
             ("2" (hide -1 4)
              (("2" (expand "sq") (("2" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (hide 4)
            (("2" (expand "sq") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (triangle_rectangle 0
  (triangle_rectangle-1 nil 3808758193
   ("" (skolem 1 ("a" "b" "c"))
    (("" (flatten)
      (("" (case "sq(a)>=0" "sq(b)>=0" "sq(c)>=0")
        (("1" (case "sq(a) <= sq(c)")
          (("1" (case "sq(b) <= sq(c)")
            (("1" (lemma "sq_neg_pos_le")
              (("1" (inst-cp -1 "a" "c")
                (("1" (inst -1 "b" "c") (("1" (ground) nil nil)) nil))
                nil))
              nil)
             ("2" (hide 2 -1) (("2" (ground) nil nil)) nil))
            nil)
           ("2" (hide 2 -1) (("2" (ground) nil nil)) nil))
          nil)
         ("2" (rewrite "sq_pos") nil nil)
         ("3" (rewrite "sq_pos") nil nil)
         ("4" (rewrite "sq_pos") nil nil))
        nil))
      nil))
    nil)
   nil nil))
 (triangle_ineq_lt 0
  (triangle_ineq_lt-1 nil 3808758193
   ("" (skosimp*)
    (("" (lemma "sq_lt_abs")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "sq_lt_abs")
            (("" (inst -1 "b!1" "d!1") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (triangle_ineq_le 0
  (triangle_ineq_le-1 nil 3808758193
   ("" (skosimp*)
    (("" (lemma "sq_le_abs")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "sq_le_abs")
            (("" (inst -1 "b!1" "d!1") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)))

