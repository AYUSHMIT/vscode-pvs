/**
 * @module VSCodePvsPseudoTerminal
 * @author Paolo Masci
 * @date 2021.03.10
 * @copyright 
 * Copyright 2019 United States Government as represented by the Administrator 
 * of the National Aeronautics and Space Administration. All Rights Reserved.
 *
 * Disclaimers
 *
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
 * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,
 * INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE
 * WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM
 * INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 * FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO
 * THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER,
 * CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY
 * OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.
 * FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES
 * REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE,
 * AND DISTRIBUTES IT "AS IS."
 *
 * Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
 * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
 * SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF
 * THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,
 * EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM
 * PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT
 * SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED
 * STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 * PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE
 * REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL
 * TERMINATION OF THIS AGREEMENT.
 **/

import { ChildProcess, spawn } from 'child_process';
import * as vscode from 'vscode';
import { PvsTheory } from '../../common/serverInterface';
import * as language from '../../common/languageUtils';

/**
 * This development has been abandoned for now, because there are still too many
 * limitations in the APIs of pseudo terminals, e.g., the pseudo terminals 
 * do **not** provide native support for:
 * - autocompletion
 * - parenthesis matching 
 * - custom tooltips
 * - mouse / cursor position
 */
 const key: {[key: string]: string } = {
    enter: "\r",
    tab: "\t",
    backspace: "\x7f",
    delete: "\x1b[3~"
};
const action: {[key: string]: string } = {
    backspace: "\x1b[D\x1b[P", // left + delete
    delete: "\x1b[P",
    left: "\x1b[D",
    up: "\x1b[A",
    down: "\x1b[B",
    right: "\x1b[C"
};
export class VSCodePvsPseudoTerminal implements vscode.Pseudoterminal {
    protected writeEmitter: vscode.EventEmitter<string> = new vscode.EventEmitter<string>();
    protected content: string = "";
    protected name: string;
    protected shellPath: string;
    protected shellArgs: string[];
    protected shellProcess: ChildProcess;

    protected cursorPosition: { ln: number, col: number } = { ln: 0, col: 0 };

    protected theory: PvsTheory;

    protected context: vscode.ExtensionContext;


    /**
     * Constructor
     */
    constructor (desc: {
        name?: string, 
        shellPath?: string, 
        shellArgs?: string[] | string,
        theory: PvsTheory,
        context: vscode.ExtensionContext
    }) {
        this.onDidWrite = this.writeEmitter.event;
        this.name = desc?.name || "";
        this.shellPath = desc?.shellPath || "";
        this.shellArgs = typeof desc?.shellArgs === "string" ? [ desc?.shellArgs ] : desc?.shellArgs;
        this.theory = desc?.theory;
    }

    /**
     * Prints data in the pseudo terminal
     * @param data 
     */
    log(data: string): void {
        if (data !== null && data !== undefined) {
            // the pseudo terminal needs \r\n, because \n moves to the next line but keeps the column
            const out: string = data.replace(/\n/g, "\r\n");

            // register cursor position
            const lines: string[] = out.split("\n");
            this.cursorPosition.ln += lines.length - 1;
            this.cursorPosition.col = lines[lines.length - 1].length;

            // write data to the pseudo terminal
            this.writeEmitter.fire(out);
        }
    }
    
    onDidWrite: vscode.Event<string>;
    onDidOverrideDimensions?: vscode.Event<vscode.TerminalDimensions>;
    onDidClose?: vscode.Event<number | void>;
    open(initialDimensions: vscode.TerminalDimensions): void {
        const cmd: string = this.shellPath;
        const args: string[] = this.shellArgs;

        this.shellProcess = spawn(cmd, args);
        this.shellProcess.stdout.setEncoding("utf8");
        this.shellProcess.stderr.setEncoding("utf8");

        this.shellProcess.stdout.on("data", async (data: string) => {
            this.log(data);
        });
        this.shellProcess.stderr.on("data", (data: string) => {
            this.log(data);
        });
        this.shellProcess.on("error", (err: Error) => {
            this.log("Shell Process error");
        });
        this.shellProcess.on("exit", (code: number, signal: string) => {
            this.log("Shell Process exited");
        });
        this.shellProcess.on("message", (message: any) => {
            this.log(`Shell Process has received message ${message}`);
        });
    }
    close(): void {
        this.log("Session terminated.");
    }
    handleInput?(data: string): void {
        this.log(data);
        switch (data) {
            case key.enter: {
                this.content += data;
                // register cursor position
                this.cursorPosition.ln++;
                this.cursorPosition.col = 0;
    
                // check if parentheses match, and if so send the command to the underlying process
                const res: language.ParCheckResult = language.parCheck(data);
                if (res?.success) {
                    this.shellProcess?.stdin?.write(this.content);
                    this.content = "";
                }
                break;
            }
            case key.backspace: {
                this.log(action.backspace);
                this.content = this.content.substring(0, this.content.length - 1);
                break;
            }
            case key.up: 
            case key.down: 
            case key.right: 
            case key.left: {
                break;
            }
            default: {
                this.content += data;
                break;
            }
        }
    }
    setDimensions?(dimensions: vscode.TerminalDimensions): void {
        throw new Error('Method not implemented.');
    }
}