basics: THEORY
  BEGIN 
    % each symbol has a kind (one of type_kind, term_kind), a signature (indicating the type), and a definition (if the symbol is interpreted)
    kind: DATATYPE
      BEGIN
        type_kind: type_kind?
        term_kind: term_kind? % we are using a list so we can store information for tuple components, record attributes, and function arguments
      END kind
    symbol: TYPE = [# name: string, kind: kind, signature: string, def: string #]

    % utility function for recognizing builtin types
    builtin_type?(name: string): boolean = name = "bool" OR name = "nat" OR name = "int" OR name = "rat" OR name = "string"
    builtin?(s: symbol): boolean = s`def = "builtin"

    % symbol constructors
    builtin_type(name: (builtin_type?)): symbol = (# name := name, kind := type_kind, signature := name, def := "builtin" #)
    uninterpreted_type(name: string): symbol = (# name := name, kind := type_kind, signature := name, def := "uninterpreted" #)
    interpreted_type(name: string, def: string): symbol = (# name := name, kind := type_kind, signature := name, def := def #)
    uninterpreted_term(name: string, signature: string): symbol = (# name := name, kind := term_kind, signature := signature, def := "uninterpreted" #)
    interpreted_term(name: string, signature: string, def: string): symbol = (# name := name, kind := term_kind, signature := signature, def := def #)
    % utility function for building the name (signature) of a symbol from a list of elements
    make_signature(sig: list[string]): RECURSIVE string
      = IF null?(sig) THEN ""
        ELSE "(" + car(sig) 
          + IF null?(cdr(sig)) THEN ")" ELSE "." + make_signature(cdr(sig)) ENDIF 
        ENDIF
      MEASURE length(sig)
    CONVERSION make_signature

    % type name equivalence (synonym: weak equivalence)
    typename_equiv(s1, s2: symbol)
      : boolean = 
        kind(s1) = kind(s2)
        AND signature(s1) = signature(s2)
    ;≡(s1, s2: symbol): boolean = typename_equiv(s1, s2)

    % type definition equivalence (synonims: equality, strong equivalence)
    typedef_equiv(s1, s2: symbol)
      : boolean = 
        ≡(s1, s2) % why is infix notation not supported???
        AND def(s1) = def(s2)
    ;=(s1, s2: symbol): boolean = typedef_equiv(s1, s2)
    
  END basics
