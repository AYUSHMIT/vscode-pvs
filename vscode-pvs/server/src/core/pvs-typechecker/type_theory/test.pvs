%--------------------
% Example sequence for testing the operational semantics of the typechecker
% The sequence would be generated when typechecking the following theory
% foo_th: THEORY BEGIN
%   foo: TYPE
%   foo: nat              %-- terms can have the same name of types declared in the context
%   foo2(x: int): nat = x %-- this function definition will generate a subtype tcc for x
%   foo3(x: nat): { x: nat | x > 2 } % this function declaration generates an existance tcc for the return type
% END foo_th
%--------------------
test: THEORY
  BEGIN IMPORTING typechecker

    % the following definitions define the sequence of events triggered when typechecking foo_th
    % enter/exit functions are omitted when they are not changing the context 
    cc1: typechecker_context = enter_type_declaration(pretype("foo"), initial_context)
    cc2: typechecker_context = enter_constant_declaration(constant_preterm("foo", "nat"), cc1)

    cc3: typechecker_context = enter_function_declaration(function_preterm("foo2", (# args := (: "int" :), ret := "nat" #)), cc2)
    cc4: typechecker_context = enter_function_argument(preterm("x", "int"), cc3)
    cc5: typechecker_context = enter_function_return(builtin_type("nat"), cc4)
    cc6: typechecker_context = exit_function_definition(builtin_type("int"), cc5)

    cc7: typechecker_context = enter_function_declaration(function_preterm("foo3", (# args := (: "nat" :), ret := "{ x: nat | x > 2 }" #)), cc5)
    cc8: typechecker_context = enter_function_argument(preterm("x", "nat"), cc7)
    cc9: typechecker_context = enter_function_return(inline_pretype("{ x: nat | x > 2 }"), cc8)

    %--------------------
    % test cases
    %--------------------

    init_test_1: boolean = member?(builtin_type("bool"), initial_context) % this should be true
    fresh_test_1: boolean = fresh?(builtin_type("bool"), initial_context) % this should be false

    equiv_test_1: boolean = builtin_type("bool") = builtin_type("bool") % this should be true
    equiv_test_2: boolean = builtin_type("bool") = builtin_type("int") % this should be false

    % foo type can be defined in the initial context
    cc1_typechecks: boolean = typechecks?(cc1) AND member?(pretype("foo"), cc1)
    % redefinition is rejected
    cc1_red: boolean = LET cc1 = enter_type_declaration(pretype("foo"), cc1) IN NOT typechecks?(cc1)

    % foo constant can be defined in cc1
    cc2_typechecks: boolean = typechecks?(cc2) AND member?(preterm("foo", "nat"), cc2)
    % redefinition is rejected
    cc2_red: boolean = LET cc2 = enter_constant_declaration(preterm("foo", "nat"), cc2) IN NOT typechecks?(cc2)

  END test