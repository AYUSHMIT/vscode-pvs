% ----------
% The typechecker logic is given as an event-based state machine.
% The sequence of events is constructed based on the structure of the pvs source file processed by the typechecker.
% The pvs source file is assumed to parse correctly.
% Two main types of events are used: 
% - enter_<xxx>, triggered at the beginning of a symbol declaration.
% - exit_<xxx>, triggered at the end of a symbol declaration.
% The event names are based on those generated by ANTLR for the PVS language (see vscode-pvs/server/src/core/PvsLanguage.g4)
% ----------

typechecker: THEORY
  BEGIN IMPORTING context
    % proof obligations
    tcc_type: DATATYPE
      BEGIN
       existance_tcc(s: symbol): existance_tcc?
       coverage_tcc: coverage_tcc?
       disjointness_tcc: disjointness_tcc?
       subtype_tcc(actual_type: symbol, expected_type: symbol): subtype_tcc?
      END tcc_type
    
    % typecheck context extends context with error information, tccs, and local bindings
    typechecker_context: TYPE = context WITH [# 
      error_flag: boolean,  % indicates whether the typechecker found an error
      tccs: list[tcc_type], % provides the list of proof obligations generated by the typechecker
      locals: list[{ s: symbol | term_kind?(kind(s)) }], % stores information on local variables necessary for the analysis of function definitions
      ret: list[symbol] % stores information about the return type produced by the expression defining the body of a function
    #]
    res2context (t: typechecker_context): context = (# terms := t`terms, types := t`types #)
    CONVERSION res2context
    context2res (cc: context): typechecker_context = (# terms := cc`terms, types := cc`types, error_flag := false, tccs := (::), locals := (::), ret := (::) #)
    CONVERSION context2res
    % utility function, finds a symbol name in the list of local variables
    find(symbol_name: string, locals: list[{ s: symbol | term_kind?(kind(s)) }]): RECURSIVE list[{ s: symbol | term_kind?(kind(s)) }]
      = IF null?(locals) THEN null
        ELSE IF car(locals)`name = symbol_name THEN (: car(locals) :)
             ELSE find(symbol_name, cdr(locals)) ENDIF ENDIF
    MEASURE length(locals)
    % utility function, checks if the typechecker flagged an error
    typechecks? (t: typechecker_context): boolean = NOT t`error_flag

    %--------------------
    % typechecker logic
    %--------------------

    % enter a type declaration
    % the type declaration is added to the context, if the name is fresh
    enter_type_declaration(s: { s: symbol | kind(s) = type_kind }, cc: typechecker_context): typechecker_context =
      IF fresh?(s, cc) THEN cc WITH [ types := cons(s, cc`types) ]
      ELSE cc WITH [ error_flag := true ] ENDIF
    
    % enter a constant declaration
    % constant declarations are added to the context, if their name is fresh
    enter_constant_declaration(s: { s: symbol | term_kind?(kind(s)) }, cc: typechecker_context): typechecker_context =
      IF fresh?(s, cc) THEN cc WITH [ terms := cons(s, cc`terms) ]
      ELSE cc WITH [ error_flag := true ] ENDIF

    % enter a function declaration
    % function declarations are added to the context, if their name is fresh
    enter_function_declaration(s: { s: symbol | term_kind?(kind(s)) }, cc: typechecker_context): typechecker_context =
      IF fresh?(s, cc) THEN cc WITH [ terms := cons(s, cc`terms) ]
      ELSE cc WITH [ error_flag := true ] ENDIF

    % exit a function declaration
    % local bindings are always de-allocated at the end of a function declaration
    exit_function_declaration(args: list[{ s: symbol | term_kind?(kind(s)) }], cc: typechecker_context): typechecker_context =
      cc WITH [ locals := (::) ] 

    % enter function argument
    % a new local binding is created for the function argument
    enter_function_argument(arg: { s: symbol | term_kind?(kind(s)) }, cc: typechecker_context): typechecker_context =
      cc WITH [ locals := cc`locals o (: arg :) ] 

    % utility function for processing all function arguments
    enter_function_arguments(args: list[{ s: symbol | term_kind?(kind(s)) }], cc: typechecker_context): RECURSIVE typechecker_context =
      IF null?(args) THEN cc
      ELSE LET cc: typechecker_context = enter_function_argument(car(args), cc)
            IN enter_function_arguments(cdr(args), cc) ENDIF
      MEASURE length(args)

    % enter function return type
    % a new local binding is created for the function return type
    enter_function_return(ret: { s: symbol | type_kind?(kind(s)) }, cc: typechecker_context): typechecker_context =
      cc WITH [ ret := (: ret :) ]

    % exit function definition
    % the type of the result produced by the function is compared with the return type declared in the function signature
    exit_function_definition(ret: { s: symbol | type_kind?(kind(s)) }, cc: { cc: typechecker_context | cons?(cc`ret) }): typechecker_context =
      IF ret = car(cc`ret) THEN cc
      ELSE cc WITH [ tccs := cons(subtype_tcc(ret, car(cc`ret)), cc`tccs) ] ENDIF

    % enter a formula declaration
    enter_formula_declaration(s: { s: symbol | term_kind?(kind(s)) }, cc: typechecker_context): typechecker_context =
      IF fresh?(s, cc) THEN cc WITH [ terms := cons(s, cc`terms) ]
      ELSE cc WITH [ error_flag := true ] ENDIF

  END typechecker