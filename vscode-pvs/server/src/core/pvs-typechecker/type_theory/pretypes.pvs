pretypes: THEORY
  BEGIN IMPORTING basics
  
    % generic pretype constructors
    void: symbol = builtin_type("void")
    basic_type(name: (builtin_type?)): symbol = builtin_type(name)
    pretype(name: string): symbol = uninterpreted_type(name)
    pretype(name: string, def: string): symbol = interpreted_type(name, def)
    inline_pretype(def: string): symbol = interpreted_type("<inline-typedef>" + def, def)

    % compoud types are function, tuple, and record
    % function pretypes have domain and range. 
    % the domain is given by a list of arguments
    function_pretype(name: string, domain: list[string], range: string): symbol = pretype(name, cons(range, domain))

    % tuple (or product) pretypes have 1 or more components of the same type
    tuple_pretype(name: string, components: list[string]): symbol = pretype(name, components)

    % record pretypes have 1 or more attributes, where each attribute is in the form 'name:type'
    record_pretype(name: string, attributes: list[string]): symbol = pretype(name, attributes)
    
  END pretypes