%% TCCs associated with theory utility_functions_th
%% This file was automatically generated by PVS, please **do not modify** by hand.
utility_functions_th: THEORY BEGIN

	% Disjointness TCC generated (at line 13, column 6) for
	    % COND ErrCond(st) = 0 -> ALM_LEVEL_0,
	    %      ErrCond(st) > 0 AND ErrCond(st) < 7 -> ALM_LEVEL_1,
	    %      ErrCond(st) >= 7 AND ErrCond(st) < 16 -> ALM_LEVEL_2,
	    %      ErrCond(st) >= 16 -> ALM_LEVEL_3
	    % ENDCOND
	  % unproved
	alrmLevel_TCC1: OBLIGATION
	FORALL (st: State):      (NOT (ErrCond(st) = 0 AND ErrCond(st) > 0 AND ErrCond(st) < 7)) AND (NOT (ErrCond(st) = 0 AND ErrCond(st) >= 7 AND ErrCond(st) < 16)) AND (NOT (ErrCond(st) = 0 AND ErrCond(st) >= 16)) AND (NOT ((ErrCond(st) > 0 AND ErrCond(st) < 7) AND ErrCond(st) >= 7 AND ErrCond(st) < 16)) AND (NOT ((ErrCond(st) > 0 AND ErrCond(st) < 7) AND ErrCond(st) >= 16)) AND NOT ((ErrCond(st) >= 7 AND ErrCond(st) < 16) AND ErrCond(st) >= 16)
	
	% Coverage TCC generated (at line 13, column 6) for
	    % COND ErrCond(st) = 0 -> ALM_LEVEL_0,
	    %      ErrCond(st) > 0 AND ErrCond(st) < 7 -> ALM_LEVEL_1,
	    %      ErrCond(st) >= 7 AND ErrCond(st) < 16 -> ALM_LEVEL_2,
	    %      ErrCond(st) >= 16 -> ALM_LEVEL_3
	    % ENDCOND
	  % unproved
	alrmLevel_TCC2: OBLIGATION
	FORALL (st: State): ErrCond(st) = 0 OR ErrCond(st) > 0 AND ErrCond(st) < 7 OR ErrCond(st) >= 7 AND ErrCond(st) < 16 OR ErrCond(st) >= 16
	
	% Subtype TCC generated (at line 21, column 14) for
	    % drugInfo(st)`drugConcentration
	    % expected type  nznum
	  % unproved
	calcFlowRate_TCC1: OBLIGATION
	FORALL (st: {st: State | drugInfo(st)`drugConcentration /= 0}): drugInfo(st)`drugConcentration /= 0
	
	% Disjointness TCC generated (at line 29, column 9) for
	    % COND iRate > upperHard OR iRate < lowerHard -> CHECK_ERR_2,
	    %      (iRate > upperSoft OR iRate < lowerSoft) AND
	    %       NOT (iRate > upperHard OR iRate < lowerHard)
	    %        -> CHECK_ERR_1,
	    %      iRate <= upperSoft AND iRate >= lowerSoft -> CHECK_OK
	    % ENDCOND
	  % unproved
	checkDoseRate_TCC1: OBLIGATION
	FORALL (iRate: real, st: State, upperHard: real): upperHard = drugLibInfo(st)`doseRateUpperHardLimit IMPLIES FORALL (upperSoft: {r: real | r <= drugLibInfo(st)`doseRateUpperHardLimit}): upperSoft = drugLibInfo(st)`doseRateUpperSoftLimit IMPLIES FORALL (lowerHard: real): lowerHard = drugLibInfo(st)`doseRateLowerHardLimit IMPLIES FORALL (lowerSoft: {r: real | r >= drugLibInfo(st)`doseRateLowerHardLimit}): lowerSoft = drugLibInfo(st)`doseRateLowerSoftLimit IMPLIES NOT ((iRate > upperHard OR iRate < lowerHard) AND (iRate > upperSoft OR iRate < lowerSoft) AND NOT (iRate > upperHard OR iRate < lowerHard)) AND NOT ((iRate > upperHard OR iRate < lowerHard) AND iRate <= upperSoft AND iRate >= lowerSoft) AND NOT (((iRate > upperSoft OR iRate < lowerSoft) AND NOT (iRate > upperHard OR iRate < lowerHard)) AND iRate <= upperSoft AND iRate >= lowerSoft)
	
	% Coverage TCC generated (at line 29, column 9) for
	    % COND iRate > upperHard OR iRate < lowerHard -> CHECK_ERR_2,
	    %      (iRate > upperSoft OR iRate < lowerSoft) AND
	    %       NOT (iRate > upperHard OR iRate < lowerHard)
	    %        -> CHECK_ERR_1,
	    %      iRate <= upperSoft AND iRate >= lowerSoft -> CHECK_OK
	    % ENDCOND
	  % unproved
	checkDoseRate_TCC2: OBLIGATION
	FORALL (iRate: real, st: State, upperHard: real): upperHard = drugLibInfo(st)`doseRateUpperHardLimit IMPLIES FORALL (upperSoft: {r: real | r <= drugLibInfo(st)`doseRateUpperHardLimit}): upperSoft = drugLibInfo(st)`doseRateUpperSoftLimit IMPLIES FORALL (lowerHard: real): lowerHard = drugLibInfo(st)`doseRateLowerHardLimit IMPLIES FORALL (lowerSoft: {r: real | r >= drugLibInfo(st)`doseRateLowerHardLimit}): lowerSoft = drugLibInfo(st)`doseRateLowerSoftLimit IMPLIES (iRate > upperHard OR iRate < lowerHard) OR (iRate > upperSoft OR iRate < lowerSoft) AND NOT (iRate > upperHard OR iRate < lowerHard) OR iRate <= upperSoft AND iRate >= lowerSoft
	
	% Disjointness TCC generated (at line 41, column 9) for
	    % COND actualCon > upperHard OR actualCon < lowerHard -> CHECK_ERR_2,
	    %      (actualCon > upperSoft OR actualCon < lowerSoft) AND
	    %       NOT (actualCon > upperHard OR actualCon < lowerHard)
	    %        -> CHECK_ERR_1,
	    %      actualCon <= upperSoft AND actualCon >= lowerSoft -> CHECK_OK
	    % ENDCOND
	  % unproved
	checkDrugConcentration_TCC1: OBLIGATION
	FORALL (st: State, actualCon: real): actualCon = drugInfo(st)`drugConcentration IMPLIES FORALL (upperHard: real): upperHard = drugLibInfo(st)`drugConcentrationUpperHardLimit IMPLIES FORALL (upperSoft: {r: real | r <= drugLibInfo(st)`drugConcentrationUpperHardLimit}): upperSoft = drugLibInfo(st)`drugConcentrationUpperSoftLimit IMPLIES FORALL (lowerHard: real): lowerHard = drugLibInfo(st)`drugConcentrationLowerHardLimit IMPLIES FORALL (lowerSoft: {r: real | r >= drugLibInfo(st)`drugConcentrationLowerHardLimit}): lowerSoft = drugLibInfo(st)`drugConcentrationLowerSoftLimit IMPLIES NOT ((actualCon > upperHard OR actualCon < lowerHard) AND (actualCon > upperSoft OR actualCon < lowerSoft) AND NOT (actualCon > upperHard OR actualCon < lowerHard)) AND NOT ((actualCon > upperHard OR actualCon < lowerHard) AND actualCon <= upperSoft AND actualCon >= lowerSoft) AND NOT (((actualCon > upperSoft OR actualCon < lowerSoft) AND NOT (actualCon > upperHard OR actualCon < lowerHard)) AND actualCon <= upperSoft AND actualCon >= lowerSoft)
	
	% Coverage TCC generated (at line 41, column 9) for
	    % COND actualCon > upperHard OR actualCon < lowerHard -> CHECK_ERR_2,
	    %      (actualCon > upperSoft OR actualCon < lowerSoft) AND
	    %       NOT (actualCon > upperHard OR actualCon < lowerHard)
	    %        -> CHECK_ERR_1,
	    %      actualCon <= upperSoft AND actualCon >= lowerSoft -> CHECK_OK
	    % ENDCOND
	  % unproved
	checkDrugConcentration_TCC2: OBLIGATION
	FORALL (st: State, actualCon: real): actualCon = drugInfo(st)`drugConcentration IMPLIES FORALL (upperHard: real): upperHard = drugLibInfo(st)`drugConcentrationUpperHardLimit IMPLIES FORALL (upperSoft: {r: real | r <= drugLibInfo(st)`drugConcentrationUpperHardLimit}): upperSoft = drugLibInfo(st)`drugConcentrationUpperSoftLimit IMPLIES FORALL (lowerHard: real): lowerHard = drugLibInfo(st)`drugConcentrationLowerHardLimit IMPLIES FORALL (lowerSoft: {r: real | r >= drugLibInfo(st)`drugConcentrationLowerHardLimit}): lowerSoft = drugLibInfo(st)`drugConcentrationLowerSoftLimit IMPLIES (actualCon > upperHard OR actualCon < lowerHard) OR (actualCon > upperSoft OR actualCon < lowerSoft) AND NOT (actualCon > upperHard OR actualCon < lowerHard) OR actualCon <= upperSoft AND actualCon >= lowerSoft
	
	% Disjointness TCC generated (at line 79, column 9) for
	    % COND inputVal > upperHard OR inputVal < lowerHard -> CHECK_ERR_2,
	    %      (inputVal > upperSoft OR inputVal < lowerSoft) AND
	    %       NOT (inputVal > upperHard OR inputVal < lowerHard)
	    %        -> CHECK_ERR_1,
	    %      inputVal <= upperSoft AND inputVal >= lowerSoft -> CHECK_OK
	    % ENDCOND
	  % unproved
	checkVTBI_TCC1: OBLIGATION
	FORALL (inputVal: real, st: State, upperHard: real): upperHard = drugLibInfo(st)`vtbiUpperHardLimit IMPLIES FORALL (upperSoft: {r: real | r <= drugLibInfo(st)`vtbiUpperHardLimit}): upperSoft = drugLibInfo(st)`vtbiUpperSoftLimit IMPLIES FORALL (lowerHard: real): lowerHard = drugLibInfo(st)`vtbiLowerHardLimit IMPLIES FORALL (lowerSoft: {r: real | r >= drugLibInfo(st)`vtbiLowerHardLimit}): lowerSoft = drugLibInfo(st)`vtbiLowerSoftLimit IMPLIES NOT ((inputVal > upperHard OR inputVal < lowerHard) AND (inputVal > upperSoft OR inputVal < lowerSoft) AND NOT (inputVal > upperHard OR inputVal < lowerHard)) AND NOT ((inputVal > upperHard OR inputVal < lowerHard) AND inputVal <= upperSoft AND inputVal >= lowerSoft) AND NOT (((inputVal > upperSoft OR inputVal < lowerSoft) AND NOT (inputVal > upperHard OR inputVal < lowerHard)) AND inputVal <= upperSoft AND inputVal >= lowerSoft)
	
	% Coverage TCC generated (at line 79, column 9) for
	    % COND inputVal > upperHard OR inputVal < lowerHard -> CHECK_ERR_2,
	    %      (inputVal > upperSoft OR inputVal < lowerSoft) AND
	    %       NOT (inputVal > upperHard OR inputVal < lowerHard)
	    %        -> CHECK_ERR_1,
	    %      inputVal <= upperSoft AND inputVal >= lowerSoft -> CHECK_OK
	    % ENDCOND
	  % unproved
	checkVTBI_TCC2: OBLIGATION
	FORALL (inputVal: real, st: State, upperHard: real): upperHard = drugLibInfo(st)`vtbiUpperHardLimit IMPLIES FORALL (upperSoft: {r: real | r <= drugLibInfo(st)`vtbiUpperHardLimit}): upperSoft = drugLibInfo(st)`vtbiUpperSoftLimit IMPLIES FORALL (lowerHard: real): lowerHard = drugLibInfo(st)`vtbiLowerHardLimit IMPLIES FORALL (lowerSoft: {r: real | r >= drugLibInfo(st)`vtbiLowerHardLimit}): lowerSoft = drugLibInfo(st)`vtbiLowerSoftLimit IMPLIES (inputVal > upperHard OR inputVal < lowerHard) OR (inputVal > upperSoft OR inputVal < lowerSoft) AND NOT (inputVal > upperHard OR inputVal < lowerHard) OR inputVal <= upperSoft AND inputVal >= lowerSoft
	
	

END utility_functions_th