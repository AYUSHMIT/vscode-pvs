main: THEORY
 BEGIN IMPORTING pilldispenser_th

  mode2string(m: mode_type): string =
   COND
    m = initial -> "initial",
    m = pwd     -> "pwd",
    m = db_pwd  -> "db_pwd",
    m = db_menu -> "db_menu",
    m = patient_list -> "patient_list",
    m = db_med_list -> "db_med_list",
    m = new_patient_details -> "new_patient_details",
    m = patient_details -> "patient_details",
    m = db_med_details -> "db_med_details",
    m = new_med -> "new_med",
    m = patient_scripts_list -> "patient_scripts_list",
    m = patient_script -> "patient_script",
    m = new_patient_script -> "new_patient_script",
    m = dose -> "dose",
    m = new_dose -> "new_dose", 
    m = scan -> "scan",
    m = scan_enabled -> "scan_enabled",
    m = creation_success -> "creation_success"   
   ENDCOND
  CONVERSION mode2string

  fields_set2string(fs: fields_set): string =
  LET ans = "{ ",
      ans = IF fs(password) THEN ans + "password" + space ELSE ans ENDIF,
      ans = IF fs(dob) THEN ans + "dob" + space ELSE ans ENDIF,
      ans = IF fs(dosage) THEN ans + "dosage" + space ELSE ans ENDIF,
      ans = IF fs(id_card) THEN ans + "id_card" + space ELSE ans ENDIF,
      ans = IF fs(mob) THEN ans + "mob" + space ELSE ans ENDIF,
      ans = IF fs(carer) THEN ans + "carer" + space ELSE ans ENDIF,
      ans = IF fs(prescription) THEN ans + "prescription" + space ELSE ans ENDIF,
      ans = IF fs(name) THEN ans + "name" + space ELSE ans ENDIF,
      ans = IF fs(validity) THEN ans + "validity" + space ELSE ans ENDIF,
      ans = IF fs(quantity) THEN ans + "quantity" + space ELSE ans ENDIF,
      ans = IF fs(column) THEN ans + "column" + space ELSE ans ENDIF,
      ans = IF fs(period) THEN ans + "period" + space ELSE ans ENDIF,
      ans = IF fs(time1) THEN ans + "time1" + space ELSE ans ENDIF,
      ans = IF fs(time2) THEN ans + "time2" + space ELSE ans ENDIF
   IN ans + " }"
  CONVERSION fields_set2string


  available_actions_type2string(aa: available_actions_type): string =
  LET ans = "{ ",
      ans = IF aa(key1) THEN ans + "key1" + space ELSE ans ENDIF,
      ans = IF aa(key2) THEN ans + "key2" + space ELSE ans ENDIF,
      ans = IF aa(key3) THEN ans + "key3" + space ELSE ans ENDIF,
      ans = IF aa(confirm) THEN ans + "confirm" + space ELSE ans ENDIF,
      ans = IF aa(create) THEN ans + "create" + space ELSE ans ENDIF,
      ans = IF aa(quit) THEN ans + "quit" + space ELSE ans ENDIF,
      ans = IF aa(bottom) THEN ans + "bottom" + space ELSE ans ENDIF,
      ans = IF aa(scan_action) THEN ans + "scan_action" + space ELSE ans ENDIF,
      ans = IF aa(tick) THEN ans + "tick" + space ELSE ans ENDIF,
      ans = IF aa(medicines) THEN ans + "medicines" + space ELSE ans ENDIF,
      ans = IF aa(drug_id_line) THEN ans + "drug_id_line" + space ELSE ans ENDIF,
      ans = IF aa(database) THEN ans + "database" + space ELSE ans ENDIF,
      ans = IF aa(reload) THEN ans + "reload" + space ELSE ans ENDIF,
      ans = IF aa(unload) THEN ans + "unload" + space ELSE ans ENDIF,
      ans = IF aa(prescriptions) THEN ans + "prescriptions" + space ELSE ans ENDIF
   IN ans + " }"
  CONVERSION available_actions_type2string

  line_printer_int(l: [ below(slimit) -> int ], s: s_index): RECURSIVE string =
    COND
      s = 0 -> "l(" + s + ") := " + l(s),
      s > 0 -> "l(" + s + ") := " + l(s) + space + line_printer_int(l, s - 1)
    ENDCOND
  MEASURE s

  line_printer_bool(l: [ below(slimit) -> bool ], s: s_index): RECURSIVE string =
    COND
      s = 0 -> "l(" + s + ") := " + l(s),
      s > 0 -> "l(" + s + ") := " + l(s) + space + line_printer_bool(l, s - 1)
    ENDCOND
  MEASURE s

  script_type2string(s: script_type): string =
   "(# med_name := " + s`med_name + space +
       "s_fields := " + s`s_fields + space +
       "s_period := " + pvs2str(s`s_period) + space +
       "quant := " + s`quant + space +
       "t1 := " + s`t1 + space +
       "t2 := " + s`t2 + " #)"
  CONVERSION script_type2string

  line_printer_script(l: [ below(slimit) -> script_type ], s: s_index): RECURSIVE string =
    COND
      s = 0 -> newline + "  l(" + s + ") := " + l(s) + newline,
      s > 0 -> newline + "  l(" + s + ") := " + l(s) + line_printer_script(l, s - 1)
    ENDCOND
  MEASURE s

  patient_id_line_type2string(pil: patient_id_line_type): string = "{ " + line_printer_int(pil, slimit) + " }"
  CONVERSION patient_id_line_type2string

  med_id_line_type2string(mil: med_id_line_type): string = "{ " + line_printer_int(mil, slimit) + " }"
  CONVERSION med_id_line_type2string

  script_line_type2string(sl: script_line_type): string = "{ " + line_printer_bool(sl, slimit) + " }"
  CONVERSION script_line_type2string

  list_script_type2string(ls: list_script_type): string = "{ " + line_printer_script(ls, slimit) + " }"
  CONVERSION list_script_type2string

  patient_type2string(pt: patient_type): string =
   "(# p_name := " + pt`p_name + newline +
     " p_fields := " + pt`p_fields + newline +
     " scripts_index := " + pt`scripts_index + newline +
     " scripts := " + pt`scripts + "#)"
  CONVERSION patient_type2string
  
  ptdb_printer(pdb: patient_db_type): RECURSIVE string =
   COND
     null?(pdb) -> space,
     cons?(pdb) -> car(pdb) + ptdb_printer(cdr(pdb)) + space
   ENDCOND
  MEASURE length(pdb)
  
  patient_db2string(pdb: patient_db_type): string = "(: " + ptdb_printer(pdb) + " :)"
  CONVERSION patient_db2string

  med_type2string(m: med_type): string =
   "(: med_name := " + m`med_name + newline +
     " med_db_fields := " + m`med_db_fields + newline +
     " quant := " + m`quant + newline +
     " col := " + m`col + " :)"
  CONVERSION med_type2string

  meddb_printer(mdb: med_db_type): RECURSIVE string =
   COND
     null?(mdb) -> space,
     cons?(mdb) -> car(mdb) + meddb_printer(cdr(mdb)) + space
   ENDCOND
  MEASURE length(mdb)
  
  med_db2string(mdb: med_db_type): string = "(: " + meddb_printer(mdb) + " :)"
  CONVERSION med_db2string

  print_state(st: state): string =
    LET ans = "(# " + newline,
        ans = ans + "mode := " + st`mode + newline,
        ans = ans + "vis_field := " + st`vis_field + newline,
	ans = ans + "sel_field := " + st`sel_field + newline,
	ans = ans + "ent_field := " + st`ent_field + newline,
	ans = ans + "action := " + st`action + newline,
	ans = ans + "patient_id_line := " + st`patient_id_line + newline,
	ans = ans + "med_id_line := " + st`med_id_line + newline,
	ans = ans + "script_line := " + st`script_line + newline,	
        ans = ans + "patients_db := " + st`patients_db + newline,
	ans = ans + "meds_db := " + st`meds_db + newline,
	ans = ans + "temp_patient := " + st`temp_patient + newline,
	ans = ans + "temp_script := " + st`temp_script + newline,
	ans = ans + "temp_med := " + st`temp_med + newline,
	ans = ans + "p_max := " + st`p_max + newline,
	ans = ans + "p_current := " + st`p_current + newline,
	ans = ans + "m_max := " + st`m_max + newline,
	ans = ans + "m_current := " + st`m_current + newline,
	ans = ans + "s_max := " + st`s_max + newline,
	ans = ans + "s_current := " + st`s_current + newline,
	ans = ans + "scan_counter := " + st`scan_counter + newline
     IN ans + " #)"
% enter first new patient
init2: state = LET st = init(0), st = select(key2, st), st = select(password, st), st = enter(password, st), st = act(confirm, st), st = select(create,st), st = select(dob, st), st = enter(dob, st), st = select(id_card, st), st = enter(id_card, st), st = select(carer, st), st = enter(carer, st), st  = select(mob, st), st = enter(mob, st), st = select(confirm, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(quit, st) IN st

% enter first script to new patient (as entered above)
init2c: state = LET st = init(0), st = select(key2, st), st = select(password, st), st = enter(password, st), st = act(confirm, st), st = select(create,st), st = select(dob, st), st = enter(dob, st), st = select(id_card, st), st = enter(id_card, st), st = select(carer, st), st = enter(carer, st), st  = select(mob, st), st = enter(mob, st), st = select(confirm, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(quit, st), st = act_patient(0, st), 
st = select(prescriptions, st), st = select(create, st), st = select(name, st), st = enter_med_name(1, st), st = select(quantity, st), st = enter_quant(3, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(bidaily, st), st = select(time1, st), st = enter_script_time(time1, 3, st), st = select(time2, st), st = enter_script_time(time2, 5, st) 
 IN st
% as above but updating the patient database
init3: state = LET st = init(0), st = select(key2, st), st = select(password, st), st = enter(password, st), st = act(confirm, st), st = select(create,st), st = select(dob, st), st = enter(dob, st), st = select(id_card, st), st = enter(id_card, st), st = select(carer, st), st = enter(carer, st), st  = select(mob, st), st = enter(mob, st), st = select(confirm, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(quit, st), st = act_patient(0, st), 
st = select(prescriptions, st), st = select(create, st), st = select(name, st), st = enter_med_name(1, st), st = select(quantity, st), st = enter_quant(3, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(bidaily, st), st = select(time1, st), st = enter_script_time(time1, 3, st), st = select(time2, st), st = enter_script_time(time2, 5, st), st = select(create, st)  IN st
% first step towards creating another script
init3a: state = LET st = init3, st = select(create, st), st = select(name, st), st = enter_med_name(2, st), st = select(quantity, st), st = enter_quant(5, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st)  IN st

init3b: state = LET st = init3, st = select(create, st), st = select(name, st), st = enter_med_name(2, st), st = select(quantity, st), st = enter_quant(5, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(daily, st), st = select(time1, st), st = enter_script_time(time1, 7, st)  
IN st
% add another prescription
init4: state = LET st = init3, st = select(create, st), st = select(name, st), st = enter_med_name(2, st), st = select(quantity, st), st = enter_quant(5, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(daily, st), st = select(time1, st), st = enter_script_time(time1, 7, st), st = select(create, st)  IN st
% add another patient
init5: state = LET st = init4, st = select(quit, st), st = select(key2, st), st = select(password, st), st = enter(password, st), st = act(confirm, st), st = select(create,st), st = select(dob, st), st = enter(dob, st), st = select(id_card, st), st = enter(id_card, st), st = select(carer, st), st = enter(carer, st), st  = select(mob, st), st = enter(mob, st), st = select(confirm, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(quit, st), st = act_patient(1, st) 
IN st

init5c: state = LET st = init5, st = select(prescriptions, st), st = select(create, st), st = select(name, st), st = enter_med_name(2, st), st = select(quantity, st), st = enter_quant(17, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(monthly, st), st = select(time1, st), st = enter_script_time(time1, 15, st) IN st
% add prescription to new patient
init6: state = LET st = init5, st = select(prescriptions, st), st = select(create, st), st = select(name, st), st = enter_med_name(2, st), st = select(quantity, st), st = enter_quant(17, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(monthly, st), st = select(time1, st), st = enter_script_time(time1, 15, st), st = select(create, st)  IN st

init7: state = LET st = init6, st = select(key1, st), st = select(key3, st), st = select(password, st), st = enter(password, st), st = act(confirm, st) IN st

init8: state = LET st = init6, st = select(key3, st), st = select(key2, st) IN st

init9: state = LET st = init6, st = select(key3, st), st = select(key1, st) IN st
% add two elements to the med database
init10: state = LET st = init6, st = select(key3, st), st = select(medicines, st), st = select(create, st), st = select(quantity, st), st = enter_quant(3, st), st = select(dosage, st), st = enter(dosage, st), st = select(validity, st), st = enter(validity, st), st = select(column, st), st = enter_column(3, st), st = select(confirm, st), st = select(create, st), st = select(medicines, st), st = select(create, st), st = select(quantity, st), st = enter_quant(5, st), st = select(dosage, st), st = enter(dosage, st), st = select(validity, st), st = enter(validity, st), st = select(column, st), st = enter_column(1, st), st = select(confirm, st) IN st
% 6 elements in the med database, 3 elements in the ptient database, p 3 has two scripts, p 2 has one script, p 1 has two scripts
init11: state = LET st = init10, st = select(key2, st), st = select(create,st), st = select(dob, st), st = enter(dob, st), st = select(id_card, st), st = enter(id_card, st), st = select(carer, st), st = enter(carer, st), st  = select(mob, st), st = enter(mob, st), st = select(confirm, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(quit, st), st = act_patient(2, st), 
st = select(prescriptions, st), st = select(create, st), st = select(name, st), st = enter_med_name(3, st), st = select(quantity, st), st = enter_quant(1, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(daily, st), st = select(time1, st), st = enter_script_time(time1, 7, st), st = select(create, st), st = select(create, st), st = select(name, st), st = enter_med_name(4, st), st = select(quantity, st), st = enter_quant(5, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(monthly, st), st = select(time1, st), st = enter_script_time(time1, 42, st), st = select(create, st), st = select(quit, st), st = select(key3, st), st = select(password, st), st = enter(password, st), st = act(confirm, st), st = select(medicines, st), st = select(create, st), st = select(quantity, st), st = enter_quant(6, st), st = select(dosage, st), st = enter(dosage, st), st = select(validity, st), st = enter(validity, st), st = select(column, st), st = enter_column(2, st), st = select(confirm, st), st = select(create, st), st = select(medicines, st), st = select(create, st), st = select(quantity, st), st = enter_quant(17, st), st = select(dosage, st), st = enter(dosage, st), st = select(validity, st), st = enter(validity, st), st = select(column, st), st = enter_column(4, st), st = select(confirm, st), st = select(create, st), st = select(medicines, st), st = select(create, st), st = select(quantity, st), st = enter_quant(9, st), st = select(dosage, st), st = enter(dosage, st), st = select(validity, st), st = enter(validity, st), st = select(column, st), st = enter_column(2, st), st = select(confirm, st), st = select(create, st), st = select(medicines, st), st = select(create, st), st = select(quantity, st), st = enter_quant(3, st), st = select(dosage, st), st = enter(dosage, st), st = select(validity, st), st = enter(validity, st), st = select(column, st), st = enter_column(1, st), st = select(confirm, st)
IN st

editup0: state = LET st = init11, st = scroll_up_med_list(st) IN st
editupdown0: state = LET st = editup0, st = scroll_down_med_list(st) IN st
% change value in the database
editmdb: state = LET st = editupdown0, st = act_med(3, st), st = select(quantity, st), st = enter_quant(4, st), st = act(confirm, st)  IN st
editmdbm1: state = LET st = editupdown0, st = act_med(3, st), st = select(quantity, st), st = enter_quant(4, st)  IN st
% new patient, more scripts
editmdbnp: state = LET st = editmdb, st = select(key2, st), st = select(create,st), st = select(dob, st), st = enter(dob, st), st = select(id_card, st), st = enter(id_card, st), st = select(carer, st), st = enter(carer, st), st  = select(mob, st), st = enter(mob, st), st = select(confirm, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(quit, st), st = act_patient(3, st), st = select(prescriptions, st), st = select(create, st), st = select(name, st), st = enter_med_name(4, st), st = select(quantity, st), st = enter_quant(3, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(bidaily, st), st = select(time1, st), st = enter_script_time(time1, 3, st), st = select(time2, st), st = enter_script_time(time2, 15, st), st = select(create, st), st = select(create, st), st = select(name, st), st = enter_med_name(2, st), st = select(quantity, st), st = enter_quant(7, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(monthly, st), st = select(time1, st), st = enter_script_time(time1, 17, st), st = select(create, st), st = select(quit, st) 
IN st
% add another patient and scripts
editmdnp1: state = LET st = editmdbnp, st = select(key2, st), st = select(password, st), st = enter(password, st), st = act(confirm, st), st = select(create,st), st = select(dob, st), st = enter(dob, st), st = select(id_card, st), st = enter(id_card, st), st = select(carer, st), st = enter(carer, st), st  = select(mob, st), st = enter(mob, st), st = select(confirm, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(quit, st), st = act_patient(4, st), st = select(prescriptions, st), st = select(create, st), st = select(name, st), st = enter_med_name(6, st), st = select(quantity, st), st = enter_quant(25, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(monthly, st), st = select(time1, st), st = enter_script_time(time1, 17, st), st = select(create, st), st = select(create, st), st = select(name, st), st = enter_med_name(3, st), st = select(quantity, st), st = enter_quant(23, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(daily, st), st = select(time1, st), st = enter_script_time(time1, 6, st), st = select(create, st), st = select(quit, st)  IN st
% more scripts and patients, 
editmdnp2: state = LET st = editmdnp1, st = select(key2, st), st = select(password, st), st = enter(password, st), st = act(confirm, st), st = select(create,st), st = select(dob, st), st = enter(dob, st), st = select(id_card, st), st = enter(id_card, st), st = select(carer, st), st = enter(carer, st), st  = select(mob, st), st = enter(mob, st), st = select(confirm, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(scan_action, st), st = select(tick, st), st = select(quit, st), st = act_patient(5, st), st = select(prescriptions, st), st = select(create, st), st = select(name, st), st = enter_med_name(4, st), st = select(quantity, st), st = enter_quant(10, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(bidaily, st), st = select(time1, st), st = enter_script_time(time1, 12, st), st = select(time2, st), st = enter_script_time(time2, 18, st), st = select(create, st), st = select(create, st), st = select(name, st), st = enter_med_name(4, st), st = select(quantity, st), st = enter_quant(15, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(weekly, st), st = select(time1, st), st = enter_script_time(time1, 23, st), st = select(create, st), st = select(create, st), st = select(name, st), st = enter_med_name(1, st), st = select(quantity, st), st = enter_quant(37, st), st = select(dosage, st), st = enter(dosage, st), st = select(prescription, st), st = enter(prescription, st), st = select(create, st), st = select(period, st), st = enter_dose_frequency(monthly, st), st = select(time1, st), st = enter_script_time(time1, 17, st), st = select(create, st), st = select(quit, st)  
IN st
% focus on patient list
lstmdnp2: state = LET st = editmdnp2, st = select(key2, st), st = select(password, st), st = enter(password, st), st = act(confirm, st) IN st
% move patient down
sdmdnp2: state = LET st = editmdnp2, st = select(key2, st), st = select(password, st), st = enter(password, st), st = act(confirm, st), st = scroll_down_patient_list(st) IN st
% move patient up (no change)
sumdnp2: state = LET st = editmdnp2, st = select(key2, st), st = select(password, st), st = enter(password, st), st = act(confirm, st), st = scroll_up_patient_list(st) IN st
% move patient down, then patient up (identity)
susdmdnp2minus: state = LET st = editmdnp2, st = select(key2, st), st = select(password, st), st = enter(password, st), st = act(confirm, st) IN st
scrolldscrollu: state = LET st = susdmdnp2minus, st = scroll_down_patient_list(st), st = scroll_up_patient_list(st) IN st
 
susdmdnp2: state = LET st = sdmdnp2, st = scroll_up_patient_list(st) IN st

chgpresmdnp1: state = LET st = lstmdnp2, st = act_patient(3, st), st = select(prescriptions, st) IN st

chgpresmdnp2: state = LET st = lstmdnp2, st = act_patient(3, st), st = select(prescriptions, st), st =act_script(1, st) IN st

chgpresmdnp2a: state = LET st = chgpresmdnp2, st = act(confirm, st) IN st

chgpresmdnp2b: state = LET st = chgpresmdnp2a, st = select(period, st), st = enter_dose_frequency(bidaily, st), st = select(time2, st), st = enter_script_time(time2, 17, st) IN st

chgpresmdnp2c: state = LET st = chgpresmdnp2b, st = act(confirm, st), st = act(create, st) IN st

chgpresmdnp2d: state = LET st = chgpresmdnp2b, st = act(confirm, st), st = act(quit, st) IN st


 END main
