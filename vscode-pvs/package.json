{
	"name": "vscode-pvs",
	"displayName": "PVS",
	"description": "Integrates the PVS theorem prover into Visual Studio Code",
	"icon": "icons/pvs-icon.png",
	"author": "Paolo Masci",
	"license": "NASA OPEN SOURCE AGREEMENT",
	"version": "1.1.2",
	"repository": {
		"type": "git",
		"url": "xxx"
	},
	"publisher": "paolomasci",
	"categories": [],
	"keywords": [
		"multi-root ready"
	],
	"engines": {
		"vscode": "^1.33.1"
	},
	"activationEvents": [
		"onLanguage:pvs"
	],
	"main": "./client/out/pvsLanguageClient",
	"contributes": {
		"notes": {
			"description": "These contributed settings can be read using vscode.workspace.getConfiguration('pvs')"
		},
		"configuration": [
			{
				"type": "object",
				"title": "PVS: Prototype Verification System",
				"properties": {
					"pvs.path": {
						"type": "string",
						"default": "/Users/pmasci/Work/pvs-snapshots/pvs-7.0-851",
						"pvs7-mac": "/Users/pmasci/Work/pvs-snapshots/pvs-7.0-851",
						"pvs7-linux": "/home/nia/github/PVS/pvs-7.0-851",
						"pvs6-mac": "/Users/pmasci/Work/pvs-snapshots/PVS-6",
						"pvs6-linux": "...",
						"description": "PVS installation folder"
					},
					"pvs.settings.completionProvider": {
						"type": "boolean",
						"default": true,
						"description": "Enable completion provider."
					},
					"pvs.settings.definitionProvider": {
						"type": "boolean",
						"default": true,
						"description": "Enable definition provider."
					},
					"pvs.settings.hoverProvider": {
						"type": "boolean",
						"default": true,
						"description": "Enable hover provider."
					},
					"pvs.settings.codelensProvider": {
						"type": "boolean",
						"default": true,
						"description": "Enable literate programming."
					},
					"pvs.zen-mode": {
						"type": "string",
						"enum": [
							"off",
							"pvs-6",
							"pvs-7"
						],
						"default": "off",
						"description": "Rapid switch between PVS versions (this setting overrides pvs.path)",
						"scope": "window"
					},
					"pvs.zen-mode:pvs-7-path": {
						"type": "string",
						"default": "/Users/pmasci/Work/pvs-snapshots/pvs-7.0-851",
						"description": "PVS installation folder (zen-mode)",
						"scope": "window"
					},
					"pvs.zen-mode:pvs-6-path": {
						"type": "string",
						"default": "/Users/pmasci/Work/pvs-snapshots/PVS-6",
						"description": "PVS installation folder (zen-mode)",
						"scope": "window"
					}
				}
			}
		],
		"iconThemes": [
			{
				"id": "pvs",
				"label": "PVS",
				"path": "./icons/pvs-icons-theme.json"
			}
		],
		"todo": {
			"viewsContainers": {
				"activitybar": [
					{
						"id": "pvs-commands-palette",
						"title": "PVS Commands Palette",
						"icon": "icons/pvs.svg"
					}
				]
			}
		},
		"views": {
			"explorer": [
				{
					"id": "theory-explorer-view",
					"name": "PVS Theory Explorer",
					"when": "resourceLangId == pvs"
				},
				{
					"id": "proof-explorer-view",
					"name": "PVS Proof Explorer",
					"when": "resourceLangId == pvs"
				}
			]
		},
		"snippets": [
			{
				"language": "pvs",
				"path": "./snippets.json"
			},
			{
				"language": "pvs",
				"path": "./symbols.json"
			}
		],
		"languageServerExample.trace.server": {
			"scope": "window",
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off"
				},
				{
					"type": "object",
					"properties": {
						"verbosity": {
							"type": "string",
							"enum": [
								"off",
								"messages",
								"verbose"
							],
							"default": "off"
						},
						"format": {
							"type": "string",
							"enum": [
								"text",
								"json"
							],
							"default": "text"
						}
					}
				}
			],
			"default": "off",
			"description": "Traces the communication between VS Code and the language server."
		},
		"commands": [
			{
				"command": "cmd.runit",
				"title": "Animate expression"
			},
			{
				"command": "cmd.proveit",
				"title": "Prove formula"
			},
			{
				"command": "editor.typecheck-file",
				"title": "Typecheck"
			},
			{
				"command": "explorer.typecheck-file-and-show-tccs",
				"title": "Typecheck"
			},
			{
				"command": "explorer.typecheck-all",
				"title": "Typecheck-all"
			},
			{
				"command": "explorer.typecheck-prove",
				"title": "Prove-all"
			},
			{
				"command": "explorer.prove-tcc",
				"title": "Prove"
			},
			{
				"command": "explorer.prove-theorem",
				"title": "Prove"
			},
			{
				"command": "terminal.pvsio",
				"title": "PVSio terminal"
			},
			{
				"command": "terminal.pvs.prove",
				"title": "PVS theorem prover (terminal)"
			},
			{
				"command": "proof-explorer.grind",
				"title": "grind"
			},
			{
				"command": "proof-explorer.assert",
				"title": "assert"
			},
			{
				"command": "proof-explorer.skosimp*",
				"title": "skosimp*"
			},
			{
				"command": "proof-explorer.inst?",
				"title": "inst?"
			},
			{
				"command": "proof-explorer.flatten",
				"title": "flatten"
			},
			{
				"command": "proof-explorer.lift-if",
				"title": "lift-if"
			},
			{
				"command": "proof-explorer.split",
				"title": "split"
			},
			{
				"command": "proof-explorer.postpone",
				"title": "postpone"
			},
			{
				"command": "proof-explorer.jump-to",
				"title": "jump-to"
			},
			{
				"command": "proof-explorer.fast-forward",
				"title": "fast-forward"
			},
			{
				"command": "proof-explorer.step",
				"title": "️️step-proof"
			}
		],
		"menus": {
			"explorer/context": [
				{
					"command": "explorer.typecheck-file-and-show-tccs",
					"when": "resourceExtname == .pvs"
				}
			],
			"view/item/context": [
				{
					"command": "explorer.typecheck-prove",
					"when": "view == theory-explorer-view && viewItem == TCCs",
					"group": "inline"
				},
				{
					"command": "explorer.prove-tcc",
					"when": "view == theory-explorer-view && viewItem == tcc",
					"group": "inline"
				},
				{
					"command": "explorer.prove-theorem",
					"when": "view == theory-explorer-view && viewItem == theorem",
					"group": "inline"
				},
				{
					"command": "explorer.typecheck-file-and-show-tccs",
					"when": "view == theory-explorer-view && viewItem == theory",
					"group": "inline"
				},
				{
					"command": "proof-explorer.jump-to",
					"when": "view == proof-explorer-view && viewItem == proof-command",
					"group": "inline"
				},
				{
					"command": "proof-explorer.fast-forward",
					"when": "view == proof-explorer-view && viewItem == proof-command",
					"group": "inline"
				},
				{
					"command": "proof-explorer.grind",
					"when": "view == proof-explorer-view && viewItem == vdash",
					"group": "simplificationRule"
				},
				{
					"command": "proof-explorer.assert",
					"when": "view == proof-explorer-view && viewItem == vdash",
					"group": "simplificationRule"
				},
				{
					"command": "proof-explorer.skosimp*",
					"when": "view == proof-explorer-view && viewItem == vdash",
					"group": "quantifierRule"
				},
				{
					"command": "proof-explorer.inst?",
					"when": "view == proof-explorer-view && viewItem == vdash",
					"group": "quantifierRule"
				},
				{
					"command": "proof-explorer.flatten",
					"when": "view == proof-explorer-view && viewItem == vdash",
					"group": "propositionalRule"
				},
				{
					"command": "proof-explorer.lift-if",
					"when": "view == proof-explorer-view && viewItem == vdash",
					"group": "propositionalRule"
				},
				{
					"command": "proof-explorer.split",
					"when": "view == proof-explorer-view && viewItem == vdash",
					"group": "propositionalRule"
				},
				{
					"command": "proof-explorer.postpone",
					"when": "view == proof-explorer-view && viewItem == vdash",
					"group": "controlRule"
				}
			],
			"editor/title/context": [
				{
					"command": "editor.typecheck-file",
					"when": "resourceExtname == .pvs"
				}
			],
			"editor/context": [
				{
					"command": "editor.typecheck-file",
					"when": "resourceExtname == .pvs"
				}
			],
			"view/title": [
				{
					"command": "explorer.typecheck-all",
					"when": "view == theory-explorer-view",
					"group": "pvs"
				},
				{
					"command": "proof-explorer.step",
					"when": "view == proof-explorer-view",
					"group": "navigation"
				}
			]
		},
		"keybindings": [
			{
				"key": "alt+x",
				"command": "pvsemacs.M-x",
				"when": "resourceExtname == .pvs"
			},
			{
				"key": "shift+alt+x",
				"command": "pvsemacs.M-x",
				"when": "resourceExtname == .pvs"
			},
			{
				"key": "alt+x",
				"command": "pvsemacs.M-x",
				"when": "resourceExtname == .tccs"
			},
			{
				"key": "shift+alt+x",
				"command": "pvsemacs.M-x",
				"when": "resourceExtname == .tccs"
			},
			{
				"key": "ctrl+t",
				"command": "editor.typecheck-file",
				"when": "resourceExtname == .pvs"
			},
			{
				"key": "shift+ctrl+t",
				"command": "explorer.typecheck-all",
				"when": "resourceLangId == pvs"
			},
			{
				"key": "ctrl+alt+g",
				"command": "proof-explorer.grind",
				"when": "resourceLangId == pvs"
			},
			{
				"key": "ctrl+c",
				"command": "workbench.action.terminal.sendSequence",
				"args": {
					"text": ""
				},
				"note": "overriding default vscode command, which kills the terminal",
				"mnemonic": "TODO: redirect to ctrl+shift+c",
				"when": "terminalFocus"
			},
			{
				"key": "ctrl+v",
				"command": "workbench.action.terminal.sendSequence",
				"args": {
					"text": ""
				},
				"note": "overriding default vscode command, which sends the string ^v to the terminal rather than pasting the content of the clipboard",
				"mnemonic": "TODO: redirect to ctrl+shift+v",
				"when": "terminalFocus"
			},
			{
				"key": "left",
				"command": "workbench.terminal.navigateLeft",
				"note": "left key shows ^[[D in the pvs terminal, need to find a way to fix this",
				"when": "terminalFocus"
			}
		],
		"languages": [
			{
				"id": "pvs",
				"extensions": [
					".pvs",
					".tccs",
					".ppe",
					".prf"
				],
				"configuration": "./syntax/pvs-language-configuration.json",
				"aliases": [
					"PVS"
				]
			}
		],
		"grammars": [
			{
				"language": "pvs",
				"scopeName": "source.pvs",
				"path": "./syntax/pvs-language.json"
			}
		],
		"colors": [
			{
				"id": "pvs.keywords.color",
				"description": "Decoration color for reserved keywords",
				"defaults": {
					"dark": "#3fa9ff",
					"light": "#4627ce55",
					"highContrast": "#2450af55"
				}
			},
			{
				"id": "pvs.operators.color",
				"description": "Decoration color for operators",
				"defaults": {
					"dark": "#3fa9ff",
					"light": "#4627ce55",
					"highContrast": "#2450af55"
				}
			},
			{
				"id": "pvs.builtinTypes.color",
				"description": "Decoration color for basic types",
				"defaults": {
					"dark": "#31d18e",
					"light": "#27975fd3",
					"highContrast": "#27975fd3"
				}
			},
			{
				"id": "pvs.functions.color",
				"description": "Decoration color for library functions",
				"defaults": {
					"dark": "#31d18e",
					"light": "#27975fd3",
					"highContrast": "#27975fd3"
				}
			},
			{
				"id": "pvs.comments.color",
				"description": "Decoration color for basic types",
				"defaults": {
					"dark": "#29a385e7",
					"light": "#174b40a8",
					"highContrast": "#1d4b17a8"
				}
			},
			{
				"id": "pvs.numbers.color",
				"description": "Decoration color for numbers",
				"defaults": {
					"dark": "#e0f584",
					"light": "#7d8a43f8",
					"highContrast": "#7d8a43f8"
				}
			},
			{
				"id": "pvs.strings.color",
				"description": "Decoration color for numbers",
				"defaults": {
					"dark": "#f5c484",
					"light": "#8a7443f8",
					"highContrast": "#8a7443f8"
				}
			},
			{
				"id": "pvs.constants.color",
				"description": "Decoration color for constants",
				"defaults": {
					"dark": "#3fa9ff",
					"light": "#4627ce55",
					"highContrast": "#2450af55"
				}
			},
			{
				"id": "pvs.error.syntax",
				"description": "Decoration color for syntax errors",
				"defaults": {
					"dark": "#ff3fc5d2",
					"light": "#ce279c4b",
					"highContrast": "#af248155"
				}
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -b",
		"watch": "tsc -b -w",
		"postinstall": "cd client && npm install && cd ../server && npm install && cd .."
	},
	"dependencies": {},
	"devDependencies": {
		"vsce": "^1.62.0",
		"@types/node": "^8.9.1",
		"typescript": "^3.4.3",
		"vscode": "^1.1.33",
		"tslint": "^5.11.0",
		"jasmine": "^3.4.0"
	},
	"devDependencies?": {
		"@types/mocha": "^5.2.6"
	}
}
