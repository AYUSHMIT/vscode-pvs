{
	"name": "vscode-pvs",
	"description": "Integrates the PVS theorem prover into Visual Studio Code",
	"version": "1.0.13",
	"author": "Paolo Masci",
	"displayName": "PVS",
	"icon": "icons/pvs-icon.png",
	"license": "NASA OPEN SOURCE AGREEMENT",
	"notices": {
		"copyright": "Copyright 2019 United States Government as represented by the Administrator of the National Aeronautics and Space Administration. All Rights Reserved.",
		"disclaimers": {
			"No Warranty": "THE SUBJECT SOFTWARE IS PROVIDED 'AS IS' WITHOUT ANY WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT 'AS IS.'",
			"Waiver and Indemnity": "RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS AGREEMENT."
		}
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/nasa/vscode-pvs"
	},
	"publisher": "paolomasci",
	"categories": [],
	"keywords": [
		"multi-root ready"
	],
	"engines": {
		"vscode": "^1.33.1"
	},
	"activationEvents": [
		"onLanguage:pvs"
	],
	"main": "./client/out/pvsLanguageClient",
	"contributes": {
		"notes": {
			"description": "These contributed settings can be read using vscode.workspace.getConfiguration('pvs')"
		},
		"configuration": [
			{
				"type": "object",
				"title": "PVS: Prototype Verification System",
				"properties": {
					"pvs.path": {
						"type": "string",
						"default": "/Users/pmasci/Work/pvs-snapshots/pvs-7.0-851",
						"pvs7-mac": "/Users/pmasci/Work/pvs-snapshots/pvs-7.0-851",
						"pvs7-linux": "/home/nia/github/PVS/pvs-7.0-851",
						"pvs6-mac": "/Users/pmasci/Work/pvs-snapshots/PVS-6",
						"pvs6-linux": "...",
						"description": "PVS installation folder"
					},
					"pvs.settings.completionProvider": {
						"type": "boolean",
						"default": true,
						"description": "Enable completion provider."
					},
					"pvs.settings.definitionProvider": {
						"type": "boolean",
						"default": true,
						"description": "Enable definition provider."
					},
					"pvs.settings.hoverProvider": {
						"type": "boolean",
						"default": true,
						"description": "Enable hover provider."
					},
					"pvs.settings.codelensProvider": {
						"type": "boolean",
						"default": true,
						"description": "Enable literate programming."
					},
					"pvs.zen-mode:pvs-7-path": {
						"type": "string",
						"default": "/Users/pmasci/Work/pvs-snapshots/pvs-7.0-851",
						"description": "PVS installation folder (zen-mode)",
						"scope": "window"
					},
					"pvs.zen-mode:pvs-6-path": {
						"type": "string",
						"default": "/Users/pmasci/Work/pvs-snapshots/PVS-6",
						"description": "PVS installation folder (zen-mode)",
						"scope": "window"
					}
				}
			}
		],
		"iconThemes": [
			{
				"id": "pvs",
				"label": "PVS",
				"path": "./icons/pvs-icons-theme.json"
			}
		],
		"todo": {
			"viewsContainers": {
				"activitybar": [
					{
						"id": "pvs-commands-palette",
						"title": "PVS Commands Palette",
						"icon": "icons/pvs.svg"
					}
				]
			}
		},
		"views": {
			"explorer": [
				{
					"id": "theory-explorer-view",
					"name": "PVS Theory Explorer",
					"when": "resourceLangId == pvs"
				},
				{
					"id": "proof-explorer-view",
					"name": "PVS Proof Explorer",
					"when": "resourceLangId == pvs"
				}
			]
		},
		"snippets": [
			{
				"language": "pvs",
				"path": "./snippets.json"
			},
			{
				"language": "pvs",
				"path": "./symbols.json"
			}
		],
		"languageServerExample.trace.server": {
			"scope": "window",
			"anyOf": [
				{
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off"
				},
				{
					"type": "object",
					"properties": {
						"verbosity": {
							"type": "string",
							"enum": [
								"off",
								"messages",
								"verbose"
							],
							"default": "off"
						},
						"format": {
							"type": "string",
							"enum": [
								"text",
								"json"
							],
							"default": "text"
						}
					}
				}
			],
			"default": "off",
			"description": "Traces the communication between VS Code and the language server."
		},
		"commands": [
			{
				"command": "cmd.runit",
				"title": "Animate expression"
			},
			{
				"command": "cmd.proveit",
				"title": "Prove formula"
			},
			{
				"command": "editor.typecheck-file",
				"title": "Typecheck"
			},
			{
				"command": "explorer.typecheck-file-and-show-tccs",
				"title": "Typecheck"
			},
			{
				"command": "explorer.typecheck-all",
				"title": "Typecheck-all"
			},
			{
				"command": "explorer.typecheck-prove",
				"title": "Prove-all"
			},
			{
				"command": "explorer.prove-formula",
				"title": "Prove"
			},
			{
				"command": "terminal.pvsio",
				"title": "PVSio terminal"
			},
			{
				"command": "terminal.pvs.prove",
				"title": "PVS theorem prover (terminal)"
			},
			{
				"command": "proof-explorer.jump-to",
				"title": "jump-to"
			},
			{
				"command": "proof-explorer.fast-forward",
				"title": "fast-forward"
			},
			{
				"command": "proof-explorer.step",
				"title": "️️step-proof"
			},
			{
				"command": "proof-explorer.run",
				"title": "️️run-proof"
			}
		],
		"menus": {
			"explorer/context": [
				{
					"command": "explorer.typecheck-file-and-show-tccs",
					"when": "resourceExtname == .pvs"
				}
			],
			"view/item/context": [
				{
					"command": "explorer.typecheck-prove",
					"when": "view == theory-explorer-view && viewItem == TCCS",
					"group": "inline"
				},
				{
					"command": "explorer.typecheck-prove",
					"when": "view == theory-explorer-view && viewItem == THEOREMS",
					"group": "inline"
				},
				{
					"command": "explorer.typecheck-prove",
					"when": "view == theory-explorer-view && viewItem == theory",
					"group": "inline"
				},
				{
					"command": "explorer.prove-formula",
					"when": "view == theory-explorer-view && viewItem == tcc",
					"group": "inline"
				},
				{
					"command": "explorer.prove-formula",
					"when": "view == theory-explorer-view && viewItem == theorem",
					"group": "inline"
				},
				{
					"command": "explorer.typecheck-file-and-show-tccs",
					"when": "view == theory-explorer-view && viewItem == theorem",
					"group": "inline"
				},
				{
					"command": "explorer.typecheck-file-and-show-tccs",
					"when": "view == theory-explorer-view && viewItem == THEOREMS",
					"group": "inline"
				},
				{
					"command": "explorer.typecheck-file-and-show-tccs",
					"when": "view == theory-explorer-view && viewItem == TCCS",
					"group": "inline"
				},
				{
					"command": "explorer.typecheck-file-and-show-tccs",
					"when": "view == theory-explorer-view && viewItem == theory",
					"group": "inline"
				},
				{
					"command": "proof-explorer.jump-to",
					"when": "view == proof-explorer-view && viewItem == proof-command",
					"group": "inline"
				},
				{
					"command": "explorer.typecheck-file-and-show-tccs",
					"when": "view == theory-explorer-view && viewItem == theory"
				},
				{
					"command": "proof-explorer.fast-forward",
					"when": "view == proof-explorer-view && viewItem == proof-command",
					"group": "inline"
				}
			],
			"editor/title/context": [
				{
					"command": "editor.typecheck-file",
					"when": "resourceExtname == .pvs"
				}
			],
			"editor/context": [
				{
					"command": "editor.typecheck-file",
					"when": "resourceExtname == .pvs"
				}
			],
			"view/title": [
				{
					"command": "explorer.typecheck-all",
					"when": "view == theory-explorer-view",
					"group": "navigation"
				},
				{
					"command": "proof-explorer.step",
					"when": "view == proof-explorer-view",
					"group": "navigation"
				},
				{
					"command": "proof-explorer.run",
					"when": "view == proof-explorer-view",
					"group": "navigation"
				}
			]
		},
		"keybindings": [
			{
				"key": "alt+x",
				"command": "pvsemacs.M-x",
				"when": "resourceExtname == .pvs"
			},
			{
				"key": "shift+alt+x",
				"command": "pvsemacs.M-x",
				"when": "resourceExtname == .pvs"
			},
			{
				"key": "alt+x",
				"command": "pvsemacs.M-x",
				"when": "resourceExtname == .tccs"
			},
			{
				"key": "shift+alt+x",
				"command": "pvsemacs.M-x",
				"when": "resourceExtname == .tccs"
			},
			{
				"key": "ctrl+t",
				"command": "editor.typecheck-file",
				"when": "resourceExtname == .pvs"
			},
			{
				"key": "shift+ctrl+t",
				"command": "explorer.typecheck-all",
				"when": "resourceLangId == pvs"
			},
			{
				"key": "ctrl+alt+g",
				"command": "proof-explorer.grind",
				"when": "resourceLangId == pvs"
			},
			{
				"key": "ctrl+c",
				"command": "workbench.action.terminal.sendSequence",
				"args": {
					"text": ""
				},
				"note": "overriding default vscode command, which kills the terminal",
				"mnemonic": "TODO: redirect to ctrl+shift+c",
				"when": "terminalFocus"
			},
			{
				"key": "ctrl+v",
				"command": "workbench.action.terminal.sendSequence",
				"args": {
					"text": ""
				},
				"note": "overriding default vscode command, which sends the string ^v to the terminal rather than pasting the content of the clipboard",
				"mnemonic": "TODO: redirect to ctrl+shift+v",
				"when": "terminalFocus"
			},
			{
				"key": "left",
				"command": "workbench.terminal.navigateLeft",
				"note": "left key shows ^[[D in the pvs terminal, need to find a way to fix this",
				"when": "terminalFocus"
			}
		],
		"languages": [
			{
				"id": "pvs",
				"extensions": [
					".pvs",
					".tccs",
					".ppe",
					".prf"
				],
				"configuration": "./syntax/pvs-language-configuration.json",
				"aliases": [
					"PVS"
				]
			}
		],
		"grammars": [
			{
				"language": "pvs",
				"scopeName": "source.pvs",
				"path": "./syntax/pvs-language.json"
			}
		],
		"colors": [
			{
				"id": "pvs.keywords.color",
				"description": "Decoration color for reserved keywords",
				"defaults": {
					"dark": "#3fa9ff",
					"light": "#4627ce55",
					"highContrast": "#2450af55"
				}
			},
			{
				"id": "pvs.operators.color",
				"description": "Decoration color for operators",
				"defaults": {
					"dark": "#3fa9ff",
					"light": "#4627ce55",
					"highContrast": "#2450af55"
				}
			},
			{
				"id": "pvs.builtinTypes.color",
				"description": "Decoration color for basic types",
				"defaults": {
					"dark": "#31d18e",
					"light": "#27975fd3",
					"highContrast": "#27975fd3"
				}
			},
			{
				"id": "pvs.functions.color",
				"description": "Decoration color for library functions",
				"defaults": {
					"dark": "#31d18e",
					"light": "#27975fd3",
					"highContrast": "#27975fd3"
				}
			},
			{
				"id": "pvs.comments.color",
				"description": "Decoration color for basic types",
				"defaults": {
					"dark": "#29a385e7",
					"light": "#174b40a8",
					"highContrast": "#1d4b17a8"
				}
			},
			{
				"id": "pvs.numbers.color",
				"description": "Decoration color for numbers",
				"defaults": {
					"dark": "#e0f584",
					"light": "#7d8a43f8",
					"highContrast": "#7d8a43f8"
				}
			},
			{
				"id": "pvs.strings.color",
				"description": "Decoration color for numbers",
				"defaults": {
					"dark": "#f5c484",
					"light": "#8a7443f8",
					"highContrast": "#8a7443f8"
				}
			},
			{
				"id": "pvs.constants.color",
				"description": "Decoration color for constants",
				"defaults": {
					"dark": "#3fa9ff",
					"light": "#4627ce55",
					"highContrast": "#2450af55"
				}
			},
			{
				"id": "pvs.error.syntax",
				"description": "Decoration color for syntax errors",
				"defaults": {
					"dark": "#ff3fc5d2",
					"light": "#ce279c4b",
					"highContrast": "#af248155"
				}
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -b",
		"watch": "tsc -b -w",
		"postinstall": "cd client && npm install && cd ../server && npm install && cd ..",
		"test:server": "node_modules/jasmine-ts/lib/index.js --config=server/test/jasmine.json"
	},
	"devDependencies": {
		"ts-node": "^8.3.0",
		"@types/jasmine": "^3.3.13",
		"@types/node": "^8.9.1",
		"jasmine": "^3.4.0",
		"jasmine-ts": "^0.3.0",
		"tslint": "^5.11.0",
		"typescript": "^3.4.3",
		"vsce": "^1.64.0",
		"vscode": "^1.1.33"
	},
	"devDependencies?": {
		"@types/mocha": "^5.2.6"
	}
}
