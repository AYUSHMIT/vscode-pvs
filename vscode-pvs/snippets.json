{
	"Autocomplete theory declaration": {
		"description": "Autocomplete theory declaration",
		"prefix": "theory",
		"scope": "pvs",
		"body": [
			"${TM_CURRENT_LINE/\\s*(\\b\\w+)\\s*:(\\s*\\w+)//g}THEORY",
			"  BEGIN $0",
			"    $2",
			"  END ${TM_CURRENT_LINE/\\s*(\\b\\w+)\\s*:(\\s*\\w+)/$1/g}"
		]
	},
	"Autocomplete datatype declaration": {
		"description": "Autocomplete datatype declaration",
		"prefix": "datatype",
		"scope": "pvs",
		"body": [
			"${TM_CURRENT_LINE/\\s*(\\b\\w+)\\s*:(\\s*\\w+)//g}DATATYPE",
			"  BEGIN $0",
			"    $2",
			"  END ${TM_CURRENT_LINE/\\s*(\\b\\w+)\\s*:(\\s*\\w+)/$1/g}"
		]
	},
	"Theory template": {
		"description": "Theory template",
		"prefix": "theory-template",
		"scope": "pvs",
		"body": [
			"${1:theoryName}: THEORY",
			"  BEGIN $0",
			"    $2",
			"  END $1"
		]
	},
	"Datatype template": {
		"description": "datatype template",
		"prefix": "datatype-template",
		"scope": "pvs",
		"body": [
			"${1:datatypeName}: THEORY",
			"  BEGIN $0",
			"    $2",
			"  END $1"
		]
	},
	"if-then-else template": {
		"description": "if-then-else template",
		"prefix": "if-then-else",
		"scope": "pvs",
		"body": [
			"IF ${1:cond} THEN ${2:expr1} ELSE ${3:expr2} ENDIF"
		]
	},
	"cond block template": {
		"description": "cond template",
		"prefix": "cond",
		"scope": "pvs",
		"body": [
			"COND",
			"  ${1:expression} -> ${2:action}",
			"ENDCOND"
		]
	}
}